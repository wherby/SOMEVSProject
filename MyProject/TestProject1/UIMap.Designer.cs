// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestProject1
{
    using System;
    using System.Security;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// SandyTestCase1 - Test Case 3 - Use 'SandyTestCase1Params' to pass parameters into this method.
        /// </summary>
        public void SandyTestCase1()
        {
            #region Variable Declarations
            WinTreeItem uIStorageSystemsTreeItem = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIItemWindow.UIEMCStorageIntegratorTreeItem.UIStorageSystemsTreeItem;
            WinTreeItem uIHostsTreeItem = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIItemWindow.UIEMCStorageIntegratorTreeItem.UIHostsTreeItem;
            WinTreeItem uIHostClustersTreeItem = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIItemWindow.UIEMCStorageIntegratorTreeItem.UIHostClustersTreeItem;
            WinTreeItem uIApplicationsTreeItem = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIItemWindow.UIEMCStorageIntegratorTreeItem.UIApplicationsTreeItem;
            WinTreeItem uIEMCStorageIntegratorTreeItem = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIItemWindow.UIEMCStorageIntegratorTreeItem;
            WinEdit uIAddStorageSystemHperEdit = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIConnectionLayoutWindow.UIAddStorageSystemClient.UIAddStorageSystemHperEdit;
            WinRowHeader uIItemRowHeader = this.UIAddStorageSystemWindow.UICreationParametersVGTable.UIHeaderPanelClient.UIItemRowHeader;
            WinEdit uISystemNameTextEditEdit = this.UIAddStorageSystemWindow.UIPanelControl1Pane.UISystemNameTextEditEdit;
            WinClient uIHeaderPanelClient1 = this.UIAddStorageSystemWindow.UICreationParametersVGTable.UIHeaderPanelClient1;
            WinEdit uIEditingcontrolEdit = this.UIAddStorageSystemWindow.UICreationParametersVGTable.UIEditingcontrolEdit;
            WinButton uIAddButton = this.UIAddStorageSystemWindow.UIAddStorageSystemClient.UIAddButton;
            WinButton uITestConnectionButton = this.UIAddStorageSystemWindow.UITestConnectionWindow.UITestConnectionButton;
            WinButton uIOKButton = this.UITestConnectionWindow.UITestConnectionDialog.UIOKButton;
            WinButton uICancelButton = this.UIAddStorageSystemWindow.UIAddStorageSystemClient.UICancelButton;
            WinEdit uIAddHostNodeHyperLinkEdit = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIConnectionLayoutWindow.UIAddHostClient.UIAddHostNodeHyperLinkEdit;
            WinButton uIAddButton1 = this.UIAddHostWindow.UIAddHostClient.UIAddButton;
            WinButton uIOKButton1 = this.UIValidationerrorWindow.UIValidationerrorDialog.UIOKButton;
            WinButton uICancelButton1 = this.UIAddHostWindow.UIAddHostClient.UICancelButton;
            WinEdit uIAddClusterSystemHypeEdit = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIConnectionLayoutWindow.UIAddClusterClient.UIAddClusterSystemHypeEdit;
            WinButton uIAddButton2 = this.UIAddClusterWindow.UIAddClusterClient.UIAddButton;
            WinButton uIOKButton2 = this.UIValiationerrorWindow.UIValiationerrorDialog.UIOKButton;
            WinButton uICancelButton2 = this.UIAddClusterWindow.UIAddClusterClient.UICancelButton;
            WinButton uIAddStorageSystemButton = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIActionsPane.UIAddStorageSystemButton;
            WinButton uIAddHostButton = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIActionsPane.UIAddHostButton;
            WinButton uICloseButton = this.UIAddHostWindow.UIAddHostTitleBar.UICloseButton;
            WinButton uIAddClusterButton = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIActionsPane.UIAddClusterButton;
            WinButton uICloseButton1 = this.UIAddClusterWindow.UIAddClusterTitleBar.UICloseButton;
            WinButton uIRefreshButton = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIActionsPane.UIRefreshButton;
            WinMenu uIViewMenu = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIActionsPane.UIViewMenu;
            WinMenuItem uICustomizeMenuItem = this.UIItemWindow.UIContextMenu.UICustomizeMenuItem;
            WinButton uIOKButton3 = this.UICustomizeViewWindow.UIOKWindow.UIOKButton;
            WinButton uIExportConfigurationButton = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIActionsPane.UIExportConfigurationButton;
            WinTreeItem uIDesktopTreeItem = this.UISaveAsWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinMenuItem uIActionMenuItem = this.UIEMCStorageIntegratorWindow.UIItemMenuBar.UIActionMenuItem;
            WinMenuItem uIOptionsMenuItem = this.UIItemWindow.UIContextMenu.UIOptionsMenuItem;
            WinButton uICloseButton2 = this.UIOptionsWindow.UIOptionsTitleBar.UICloseButton;
            WinButton uIBackButton = this.UIEMCStorageIntegratorWindow.UIItemWindow.UIBackButton;
            WinMenuItem uIFileMenuItem = this.UIEMCStorageIntegratorWindow.UIItemMenuBar.UIFileMenuItem;
            WinMenuItem uIExitMenuItem = this.UIItemWindow.UIContextMenu.UIExitMenuItem;
            #endregion
            char[] chars = { 'P', 'a', 's', 's', 'w', 'o', 'r', 'd', '!' }; 
            SecureString password = new SecureString();

            foreach (char ch in chars)
                password.AppendChar(ch); 


            // Launch '%SystemRoot%\System32\mmc.exe' with arguments '"C:\Program Files\EMC\EMC Storage Integrator\ESIx64.msc"'
            ApplicationUnderTest mmcApplication = ApplicationUnderTest.Launch(this.SandyTestCase1Params.ExePath, this.SandyTestCase1Params.AlternateExePath, "\"C:\\Program Files\\EMC\\EMC Storage Integrator\\ESIx64.msc\"", "administrator", password, "sr5dom");

            // Click 'EMC Storage Integrator' -> 'Storage Systems' tree item
            Mouse.Click(uIStorageSystemsTreeItem, new Point(-33, 9));

            // Click 'EMC Storage Integrator' -> 'Hosts' tree item
            Mouse.Click(uIHostsTreeItem, new Point(-29, 8));

            // Click 'EMC Storage Integrator' -> 'Host Clusters' tree item
            Mouse.Click(uIHostClustersTreeItem, new Point(-28, 5));

            // Click 'EMC Storage Integrator' -> 'Applications' tree item
            Mouse.Click(uIApplicationsTreeItem, new Point(-30, 7));

            // Click 'EMC Storage Integrator' -> 'Hosts' tree item
            Mouse.Click(uIHostsTreeItem, new Point(9, 3));

            // Click 'EMC Storage Integrator' -> 'Host Clusters' tree item
            Mouse.Click(uIHostClustersTreeItem, new Point(14, 10));

            // Click 'EMC Storage Integrator' -> 'Applications' tree item
            Mouse.Click(uIApplicationsTreeItem, new Point(23, 9));

            // Click 'EMC Storage Integrator' -> 'Storage Systems' tree item
            Mouse.Click(uIStorageSystemsTreeItem, new Point(37, 8));

            // Click 'EMC Storage Integrator' tree item
            Mouse.Click(uIEMCStorageIntegratorTreeItem, new Point(90, 4));

            // Click 'addStorageSystemHperLinkEdit' text box
            Mouse.Click(uIAddStorageSystemHperEdit, new Point(50, 7));

            // Click 'Unknown Name' row header
            Mouse.Click(uIItemRowHeader, new Point(20, 19));

            // Click 'systemNameTextEdit' text box
            Mouse.Click(uISystemNameTextEditEdit, new Point(64, 4));

            // Click 'Header Panel' client
            Mouse.Click(uIHeaderPanelClient1, new Point(326, 49));

            // Click 'Header Panel' client
            Mouse.Click(uIHeaderPanelClient1, new Point(314, 79));

            // Click 'Editing control' text box
            Mouse.Click(uIEditingcontrolEdit, new Point(53, 12));

            // Click 'Header Panel' client
            Mouse.Click(uIHeaderPanelClient1, new Point(308, 113));

            // Click 'Add' button
            Mouse.Click(uIAddButton, new Point(70, 9));

            // Click 'Test Connection' button
            Mouse.Click(uITestConnectionButton, new Point(30, 11));

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(47, 11));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(37, 22));

            // Click 'addHostNodeHyperLinkEdit' text box
            Mouse.Click(uIAddHostNodeHyperLinkEdit, new Point(26, 6));

            // Click 'Add' button
            Mouse.Click(uIAddButton1, new Point(32, 20));

            // Click '&OK' button
            Mouse.Click(uIOKButton1, new Point(45, 4));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton1, new Point(78, 15));

            // Click 'addClusterSystemHyperLinkEdit' text box
            Mouse.Click(uIAddClusterSystemHypeEdit, new Point(35, 4));

            // Click 'Add' button
            Mouse.Click(uIAddButton2, new Point(37, 14));

            // Click '&OK' button
            Mouse.Click(uIOKButton2, new Point(51, 16));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton2, new Point(25, 12));

            // Click 'Add Storage System' button
            Mouse.Click(uIAddStorageSystemButton, new Point(62, 11));

            // Click 'Add' button
            Mouse.Click(uIAddButton, new Point(58, 11));

            // Click 'Test Connection' button
            Mouse.Click(uITestConnectionButton, new Point(61, 8));

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(56, 6));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(29, 22));

            // Click 'Add Host' button
            Mouse.Click(uIAddHostButton, new Point(70, 15));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(10, 8));

            // Click 'Add Cluster' button
            Mouse.Click(uIAddClusterButton, new Point(60, 14));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(6, 8));

            // Click 'Refresh' button
            Mouse.Click(uIRefreshButton, new Point(52, 14));

            // Click 'View' popup menu
            Mouse.Click(uIViewMenu, new Point(51, 18));

            // Click 'Customize...' menu item
            Mouse.Click(uICustomizeMenuItem, new Point(67, 13));

            // Click 'OK' button
            Mouse.Click(uIOKButton3, new Point(55, 17));

            // Click 'Export Configuration' button
            Mouse.Click(uIExportConfigurationButton, new Point(116, 4));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(26, 12));

            // Select '1' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SandyTestCase1Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(82, 14));

            // Click 'Action' menu item
            Mouse.Click(uIActionMenuItem, new Point(32, 8));

            // Click 'Options...' menu item
            Mouse.Click(uIOptionsMenuItem, new Point(18, 8));

            // Click 'Close' button
            Mouse.Click(uICloseButton2, new Point(10, 10));

            // Click 'Back' button
            Mouse.Click(uIBackButton, new Point(10, 12));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(19, 15));

            // Click 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(21, 5));
        }
        
        #region Properties
        public virtual SandyTestCase1Params SandyTestCase1Params
        {
            get
            {
                if ((this.mSandyTestCase1Params == null))
                {
                    this.mSandyTestCase1Params = new SandyTestCase1Params();
                }
                return this.mSandyTestCase1Params;
            }
        }
        
        public UIEMCStorageIntegratorWindow UIEMCStorageIntegratorWindow
        {
            get
            {
                if ((this.mUIEMCStorageIntegratorWindow == null))
                {
                    this.mUIEMCStorageIntegratorWindow = new UIEMCStorageIntegratorWindow();
                }
                return this.mUIEMCStorageIntegratorWindow;
            }
        }
        
        public UIAddStorageSystemWindow UIAddStorageSystemWindow
        {
            get
            {
                if ((this.mUIAddStorageSystemWindow == null))
                {
                    this.mUIAddStorageSystemWindow = new UIAddStorageSystemWindow();
                }
                return this.mUIAddStorageSystemWindow;
            }
        }
        
        public UITestConnectionWindow1 UITestConnectionWindow
        {
            get
            {
                if ((this.mUITestConnectionWindow == null))
                {
                    this.mUITestConnectionWindow = new UITestConnectionWindow1();
                }
                return this.mUITestConnectionWindow;
            }
        }
        
        public UIAddHostWindow UIAddHostWindow
        {
            get
            {
                if ((this.mUIAddHostWindow == null))
                {
                    this.mUIAddHostWindow = new UIAddHostWindow();
                }
                return this.mUIAddHostWindow;
            }
        }
        
        public UIValidationerrorWindow UIValidationerrorWindow
        {
            get
            {
                if ((this.mUIValidationerrorWindow == null))
                {
                    this.mUIValidationerrorWindow = new UIValidationerrorWindow();
                }
                return this.mUIValidationerrorWindow;
            }
        }
        
        public UIAddClusterWindow UIAddClusterWindow
        {
            get
            {
                if ((this.mUIAddClusterWindow == null))
                {
                    this.mUIAddClusterWindow = new UIAddClusterWindow();
                }
                return this.mUIAddClusterWindow;
            }
        }
        
        public UIValiationerrorWindow UIValiationerrorWindow
        {
            get
            {
                if ((this.mUIValiationerrorWindow == null))
                {
                    this.mUIValiationerrorWindow = new UIValiationerrorWindow();
                }
                return this.mUIValiationerrorWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICustomizeViewWindow UICustomizeViewWindow
        {
            get
            {
                if ((this.mUICustomizeViewWindow == null))
                {
                    this.mUICustomizeViewWindow = new UICustomizeViewWindow();
                }
                return this.mUICustomizeViewWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIOptionsWindow UIOptionsWindow
        {
            get
            {
                if ((this.mUIOptionsWindow == null))
                {
                    this.mUIOptionsWindow = new UIOptionsWindow();
                }
                return this.mUIOptionsWindow;
            }
        }
        #endregion
        
        #region Fields
        private SandyTestCase1Params mSandyTestCase1Params;
        
        private UIEMCStorageIntegratorWindow mUIEMCStorageIntegratorWindow;
        
        private UIAddStorageSystemWindow mUIAddStorageSystemWindow;
        
        private UITestConnectionWindow1 mUITestConnectionWindow;
        
        private UIAddHostWindow mUIAddHostWindow;
        
        private UIValidationerrorWindow mUIValidationerrorWindow;
        
        private UIAddClusterWindow mUIAddClusterWindow;
        
        private UIValiationerrorWindow mUIValiationerrorWindow;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UICustomizeViewWindow mUICustomizeViewWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIOptionsWindow mUIOptionsWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SandyTestCase1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class SandyTestCase1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%SystemRoot%\System32\mmc.exe' with arguments '"C:\Program Files\EMC\EMC Storage Integrator\ESIx64.msc"'
        /// </summary>
        public string ExePath = "C:\\Windows\\System32\\mmc.exe";
        
        /// <summary>
        /// Launch '%SystemRoot%\System32\mmc.exe' with arguments '"C:\Program Files\EMC\EMC Storage Integrator\ESIx64.msc"'
        /// </summary>
        public string AlternateExePath = "%SystemRoot%\\System32\\mmc.exe";
        
        /// <summary>
        /// Select '1' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "1";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIEMCStorageIntegratorWindow : WinWindow
    {
        
        public UIEMCStorageIntegratorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "EMC Storage Integrator (x64)";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MMCMainFrame";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIEMCStorageIntegratorWindow1 UIEMCStorageIntegratorWindow1
        {
            get
            {
                if ((this.mUIEMCStorageIntegratorWindow1 == null))
                {
                    this.mUIEMCStorageIntegratorWindow1 = new UIEMCStorageIntegratorWindow1(this);
                }
                return this.mUIEMCStorageIntegratorWindow1;
            }
        }
        
        public UIItemMenuBar UIItemMenuBar
        {
            get
            {
                if ((this.mUIItemMenuBar == null))
                {
                    this.mUIItemMenuBar = new UIItemMenuBar(this);
                }
                return this.mUIItemMenuBar;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIEMCStorageIntegratorWindow1 mUIEMCStorageIntegratorWindow1;
        
        private UIItemMenuBar mUIItemMenuBar;
        
        private UIItemWindow1 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIEMCStorageIntegratorWindow1 : WinWindow
    {
        
        public UIEMCStorageIntegratorWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65280";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIConnectionLayoutWindow UIConnectionLayoutWindow
        {
            get
            {
                if ((this.mUIConnectionLayoutWindow == null))
                {
                    this.mUIConnectionLayoutWindow = new UIConnectionLayoutWindow(this);
                }
                return this.mUIConnectionLayoutWindow;
            }
        }
        
        public UIActionsPane UIActionsPane
        {
            get
            {
                if ((this.mUIActionsPane == null))
                {
                    this.mUIActionsPane = new UIActionsPane(this);
                }
                return this.mUIActionsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIConnectionLayoutWindow mUIConnectionLayoutWindow;
        
        private UIActionsPane mUIActionsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "12785";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIEMCStorageIntegratorTreeItem UIEMCStorageIntegratorTreeItem
        {
            get
            {
                if ((this.mUIEMCStorageIntegratorTreeItem == null))
                {
                    this.mUIEMCStorageIntegratorTreeItem = new UIEMCStorageIntegratorTreeItem(this);
                }
                return this.mUIEMCStorageIntegratorTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIEMCStorageIntegratorTreeItem mUIEMCStorageIntegratorTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIEMCStorageIntegratorTreeItem : WinTreeItem
    {
        
        public UIEMCStorageIntegratorTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "EMC Storage Integrator";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIStorageSystemsTreeItem
        {
            get
            {
                if ((this.mUIStorageSystemsTreeItem == null))
                {
                    this.mUIStorageSystemsTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIStorageSystemsTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Storage Systems";
                    this.mUIStorageSystemsTreeItem.SearchProperties["Value"] = "1";
                    this.mUIStorageSystemsTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIStorageSystemsTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIStorageSystemsTreeItem.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIStorageSystemsTreeItem;
            }
        }
        
        public WinTreeItem UIHostsTreeItem
        {
            get
            {
                if ((this.mUIHostsTreeItem == null))
                {
                    this.mUIHostsTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIHostsTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Hosts";
                    this.mUIHostsTreeItem.SearchProperties["Value"] = "1";
                    this.mUIHostsTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIHostsTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIHostsTreeItem.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIHostsTreeItem;
            }
        }
        
        public WinTreeItem UIHostClustersTreeItem
        {
            get
            {
                if ((this.mUIHostClustersTreeItem == null))
                {
                    this.mUIHostClustersTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIHostClustersTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Host Clusters";
                    this.mUIHostClustersTreeItem.SearchProperties["Value"] = "1";
                    this.mUIHostClustersTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIHostClustersTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIHostClustersTreeItem.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIHostClustersTreeItem;
            }
        }
        
        public WinTreeItem UIApplicationsTreeItem
        {
            get
            {
                if ((this.mUIApplicationsTreeItem == null))
                {
                    this.mUIApplicationsTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIApplicationsTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Applications";
                    this.mUIApplicationsTreeItem.SearchProperties["Value"] = "1";
                    this.mUIApplicationsTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIApplicationsTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIApplicationsTreeItem.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIApplicationsTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIStorageSystemsTreeItem;
        
        private WinTreeItem mUIHostsTreeItem;
        
        private WinTreeItem mUIHostClustersTreeItem;
        
        private WinTreeItem mUIApplicationsTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConnectionLayoutWindow : WinWindow
    {
        
        public UIConnectionLayoutWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "mainLayoutControl";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIAddStorageSystemClient UIAddStorageSystemClient
        {
            get
            {
                if ((this.mUIAddStorageSystemClient == null))
                {
                    this.mUIAddStorageSystemClient = new UIAddStorageSystemClient(this);
                }
                return this.mUIAddStorageSystemClient;
            }
        }
        
        public UIAddHostClient UIAddHostClient
        {
            get
            {
                if ((this.mUIAddHostClient == null))
                {
                    this.mUIAddHostClient = new UIAddHostClient(this);
                }
                return this.mUIAddHostClient;
            }
        }
        
        public UIAddClusterClient UIAddClusterClient
        {
            get
            {
                if ((this.mUIAddClusterClient == null))
                {
                    this.mUIAddClusterClient = new UIAddClusterClient(this);
                }
                return this.mUIAddClusterClient;
            }
        }
        #endregion
        
        #region Fields
        private UIAddStorageSystemClient mUIAddStorageSystemClient;
        
        private UIAddHostClient mUIAddHostClient;
        
        private UIAddClusterClient mUIAddClusterClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAddStorageSystemClient : WinClient
    {
        
        public UIAddStorageSystemClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Add Storage System";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAddStorageSystemHperEdit
        {
            get
            {
                if ((this.mUIAddStorageSystemHperEdit == null))
                {
                    this.mUIAddStorageSystemHperEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAddStorageSystemHperEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Add Storage System";
                    this.mUIAddStorageSystemHperEdit.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIAddStorageSystemHperEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAddStorageSystemHperEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAddHostClient : WinClient
    {
        
        public UIAddHostClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Add Host";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAddHostNodeHyperLinkEdit
        {
            get
            {
                if ((this.mUIAddHostNodeHyperLinkEdit == null))
                {
                    this.mUIAddHostNodeHyperLinkEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAddHostNodeHyperLinkEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Add Host";
                    this.mUIAddHostNodeHyperLinkEdit.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIAddHostNodeHyperLinkEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAddHostNodeHyperLinkEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAddClusterClient : WinClient
    {
        
        public UIAddClusterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Add Cluster";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAddClusterSystemHypeEdit
        {
            get
            {
                if ((this.mUIAddClusterSystemHypeEdit == null))
                {
                    this.mUIAddClusterSystemHypeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAddClusterSystemHypeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Add Cluster";
                    this.mUIAddClusterSystemHypeEdit.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIAddClusterSystemHypeEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAddClusterSystemHypeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIActionsPane : WinPane
    {
        
        public UIActionsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Actions";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinButton UIAddStorageSystemButton
        {
            get
            {
                if ((this.mUIAddStorageSystemButton == null))
                {
                    this.mUIAddStorageSystemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddStorageSystemButton.SearchProperties[WinButton.PropertyNames.Name] = "Add Storage System";
                    this.mUIAddStorageSystemButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIAddStorageSystemButton;
            }
        }
        
        public WinButton UIAddHostButton
        {
            get
            {
                if ((this.mUIAddHostButton == null))
                {
                    this.mUIAddHostButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddHostButton.SearchProperties[WinButton.PropertyNames.Name] = "Add Host";
                    this.mUIAddHostButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIAddHostButton;
            }
        }
        
        public WinButton UIAddClusterButton
        {
            get
            {
                if ((this.mUIAddClusterButton == null))
                {
                    this.mUIAddClusterButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddClusterButton.SearchProperties[WinButton.PropertyNames.Name] = "Add Cluster";
                    this.mUIAddClusterButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIAddClusterButton;
            }
        }
        
        public WinButton UIRefreshButton
        {
            get
            {
                if ((this.mUIRefreshButton == null))
                {
                    this.mUIRefreshButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRefreshButton.SearchProperties[WinButton.PropertyNames.Name] = "Refresh";
                    this.mUIRefreshButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIRefreshButton;
            }
        }
        
        public WinMenu UIViewMenu
        {
            get
            {
                if ((this.mUIViewMenu == null))
                {
                    this.mUIViewMenu = new WinMenu(this);
                    #region Search Criteria
                    this.mUIViewMenu.SearchProperties[WinMenu.PropertyNames.Name] = "View";
                    this.mUIViewMenu.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIViewMenu;
            }
        }
        
        public WinButton UIExportConfigurationButton
        {
            get
            {
                if ((this.mUIExportConfigurationButton == null))
                {
                    this.mUIExportConfigurationButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIExportConfigurationButton.SearchProperties[WinButton.PropertyNames.Name] = "Export Configuration";
                    this.mUIExportConfigurationButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIExportConfigurationButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddStorageSystemButton;
        
        private WinButton mUIAddHostButton;
        
        private WinButton mUIAddClusterButton;
        
        private WinButton mUIRefreshButton;
        
        private WinMenu mUIViewMenu;
        
        private WinButton mUIExportConfigurationButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemMenuBar : WinMenuBar
    {
        
        public UIItemMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIActionMenuItem
        {
            get
            {
                if ((this.mUIActionMenuItem == null))
                {
                    this.mUIActionMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIActionMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Action";
                    this.mUIActionMenuItem.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIActionMenuItem;
            }
        }
        
        public WinMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIFileMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
                    this.mUIFileMenuItem.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIActionMenuItem;
        
        private WinMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4098";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinButton UIBackButton
        {
            get
            {
                if ((this.mUIBackButton == null))
                {
                    this.mUIBackButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBackButton.SearchProperties[WinButton.PropertyNames.Name] = "Back";
                    this.mUIBackButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIBackButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIBackButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAddStorageSystemWindow : WinWindow
    {
        
        public UIAddStorageSystemWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Add Storage System:";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Add Storage System:");
            #endregion
        }
        
        #region Properties
        public UICreationParametersVGTable UICreationParametersVGTable
        {
            get
            {
                if ((this.mUICreationParametersVGTable == null))
                {
                    this.mUICreationParametersVGTable = new UICreationParametersVGTable(this);
                }
                return this.mUICreationParametersVGTable;
            }
        }
        
        public UIPanelControl1Pane UIPanelControl1Pane
        {
            get
            {
                if ((this.mUIPanelControl1Pane == null))
                {
                    this.mUIPanelControl1Pane = new UIPanelControl1Pane(this);
                }
                return this.mUIPanelControl1Pane;
            }
        }
        
        public UIAddStorageSystemClient1 UIAddStorageSystemClient
        {
            get
            {
                if ((this.mUIAddStorageSystemClient == null))
                {
                    this.mUIAddStorageSystemClient = new UIAddStorageSystemClient1(this);
                }
                return this.mUIAddStorageSystemClient;
            }
        }
        
        public UITestConnectionWindow UITestConnectionWindow
        {
            get
            {
                if ((this.mUITestConnectionWindow == null))
                {
                    this.mUITestConnectionWindow = new UITestConnectionWindow(this);
                }
                return this.mUITestConnectionWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICreationParametersVGTable mUICreationParametersVGTable;
        
        private UIPanelControl1Pane mUIPanelControl1Pane;
        
        private UIAddStorageSystemClient1 mUIAddStorageSystemClient;
        
        private UITestConnectionWindow mUITestConnectionWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICreationParametersVGTable : WinTable
    {
        
        public UICreationParametersVGTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Add Storage System:");
            #endregion
        }
        
        #region Properties
        public UIHeaderPanelClient UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new UIHeaderPanelClient(this);
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public WinClient UIHeaderPanelClient1
        {
            get
            {
                if ((this.mUIHeaderPanelClient1 == null))
                {
                    this.mUIHeaderPanelClient1 = new WinClient(this);
                    #region Search Criteria
                    this.mUIHeaderPanelClient1.SearchProperties[WinControl.PropertyNames.Name] = "Header Panel";
                    this.mUIHeaderPanelClient1.WindowTitles.Add("Add Storage System:");
                    #endregion
                }
                return this.mUIHeaderPanelClient1;
            }
        }
        
        public WinEdit UIEditingcontrolEdit
        {
            get
            {
                if ((this.mUIEditingcontrolEdit == null))
                {
                    this.mUIEditingcontrolEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIEditingcontrolEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Editing control";
                    this.mUIEditingcontrolEdit.WindowTitles.Add("Add Storage System:");
                    #endregion
                }
                return this.mUIEditingcontrolEdit;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderPanelClient mUIHeaderPanelClient;
        
        private WinClient mUIHeaderPanelClient1;
        
        private WinEdit mUIEditingcontrolEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHeaderPanelClient : WinClient
    {
        
        public UIHeaderPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Add Storage System:");
            #endregion
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader.WindowTitles.Add("Add Storage System:");
                    #endregion
                }
                return this.mUIItemRowHeader;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanelControl1Pane : WinPane
    {
        
        public UIPanelControl1Pane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "panelControl1";
            this.WindowTitles.Add("Add Storage System:");
            #endregion
        }
        
        #region Properties
        public WinEdit UISystemNameTextEditEdit
        {
            get
            {
                if ((this.mUISystemNameTextEditEdit == null))
                {
                    this.mUISystemNameTextEditEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUISystemNameTextEditEdit.WindowTitles.Add("Add Storage System:");
                    #endregion
                }
                return this.mUISystemNameTextEditEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUISystemNameTextEditEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAddStorageSystemClient1 : WinClient
    {
        
        public UIAddStorageSystemClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Add Storage System:";
            this.WindowTitles.Add("Add Storage System:");
            #endregion
        }
        
        #region Properties
        public WinButton UIAddButton
        {
            get
            {
                if ((this.mUIAddButton == null))
                {
                    this.mUIAddButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddButton.SearchProperties[WinButton.PropertyNames.Name] = "Add";
                    this.mUIAddButton.WindowTitles.Add("Add Storage System:");
                    #endregion
                }
                return this.mUIAddButton;
            }
        }
        
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Add Storage System:");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddButton;
        
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITestConnectionWindow : WinWindow
    {
        
        public UITestConnectionWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "testConnectionButton";
            this.WindowTitles.Add("Add Storage System:");
            #endregion
        }
        
        #region Properties
        public WinButton UITestConnectionButton
        {
            get
            {
                if ((this.mUITestConnectionButton == null))
                {
                    this.mUITestConnectionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUITestConnectionButton.SearchProperties[WinButton.PropertyNames.Name] = "Test Connection";
                    this.mUITestConnectionButton.WindowTitles.Add("Add Storage System:");
                    #endregion
                }
                return this.mUITestConnectionButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUITestConnectionButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITestConnectionWindow1 : WinWindow
    {
        
        public UITestConnectionWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Test Connection";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Test Connection");
            #endregion
        }
        
        #region Properties
        public UITestConnectionDialog UITestConnectionDialog
        {
            get
            {
                if ((this.mUITestConnectionDialog == null))
                {
                    this.mUITestConnectionDialog = new UITestConnectionDialog(this);
                }
                return this.mUITestConnectionDialog;
            }
        }
        #endregion
        
        #region Fields
        private UITestConnectionDialog mUITestConnectionDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITestConnectionDialog : WinControl
    {
        
        public UITestConnectionDialog(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Test Connection";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
            this.WindowTitles.Add("Test Connection");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "&OK";
                    this.mUIOKButton.WindowTitles.Add("Test Connection");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAddHostWindow : WinWindow
    {
        
        public UIAddHostWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Add Host";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Add Host");
            #endregion
        }
        
        #region Properties
        public UIAddHostClient1 UIAddHostClient
        {
            get
            {
                if ((this.mUIAddHostClient == null))
                {
                    this.mUIAddHostClient = new UIAddHostClient1(this);
                }
                return this.mUIAddHostClient;
            }
        }
        
        public UIAddHostTitleBar UIAddHostTitleBar
        {
            get
            {
                if ((this.mUIAddHostTitleBar == null))
                {
                    this.mUIAddHostTitleBar = new UIAddHostTitleBar(this);
                }
                return this.mUIAddHostTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIAddHostClient1 mUIAddHostClient;
        
        private UIAddHostTitleBar mUIAddHostTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAddHostClient1 : WinClient
    {
        
        public UIAddHostClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Add Host";
            this.WindowTitles.Add("Add Host");
            #endregion
        }
        
        #region Properties
        public WinButton UIAddButton
        {
            get
            {
                if ((this.mUIAddButton == null))
                {
                    this.mUIAddButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddButton.SearchProperties[WinButton.PropertyNames.Name] = "Add";
                    this.mUIAddButton.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIAddButton;
            }
        }
        
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddButton;
        
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAddHostTitleBar : WinTitleBar
    {
        
        public UIAddHostTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Add Host");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIValidationerrorWindow : WinWindow
    {
        
        public UIValidationerrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Validation error";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Validation error");
            #endregion
        }
        
        #region Properties
        public UIValidationerrorDialog UIValidationerrorDialog
        {
            get
            {
                if ((this.mUIValidationerrorDialog == null))
                {
                    this.mUIValidationerrorDialog = new UIValidationerrorDialog(this);
                }
                return this.mUIValidationerrorDialog;
            }
        }
        #endregion
        
        #region Fields
        private UIValidationerrorDialog mUIValidationerrorDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIValidationerrorDialog : WinControl
    {
        
        public UIValidationerrorDialog(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Validation error";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
            this.WindowTitles.Add("Validation error");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "&OK";
                    this.mUIOKButton.WindowTitles.Add("Validation error");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAddClusterWindow : WinWindow
    {
        
        public UIAddClusterWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Add Cluster";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Add Cluster");
            #endregion
        }
        
        #region Properties
        public UIAddClusterClient1 UIAddClusterClient
        {
            get
            {
                if ((this.mUIAddClusterClient == null))
                {
                    this.mUIAddClusterClient = new UIAddClusterClient1(this);
                }
                return this.mUIAddClusterClient;
            }
        }
        
        public UIAddClusterTitleBar UIAddClusterTitleBar
        {
            get
            {
                if ((this.mUIAddClusterTitleBar == null))
                {
                    this.mUIAddClusterTitleBar = new UIAddClusterTitleBar(this);
                }
                return this.mUIAddClusterTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIAddClusterClient1 mUIAddClusterClient;
        
        private UIAddClusterTitleBar mUIAddClusterTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAddClusterClient1 : WinClient
    {
        
        public UIAddClusterClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Add Cluster";
            this.WindowTitles.Add("Add Cluster");
            #endregion
        }
        
        #region Properties
        public WinButton UIAddButton
        {
            get
            {
                if ((this.mUIAddButton == null))
                {
                    this.mUIAddButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddButton.SearchProperties[WinButton.PropertyNames.Name] = "Add";
                    this.mUIAddButton.WindowTitles.Add("Add Cluster");
                    #endregion
                }
                return this.mUIAddButton;
            }
        }
        
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Add Cluster");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddButton;
        
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAddClusterTitleBar : WinTitleBar
    {
        
        public UIAddClusterTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Add Cluster");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Add Cluster");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIValiationerrorWindow : WinWindow
    {
        
        public UIValiationerrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Valiation error";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Valiation error");
            #endregion
        }
        
        #region Properties
        public UIValiationerrorDialog UIValiationerrorDialog
        {
            get
            {
                if ((this.mUIValiationerrorDialog == null))
                {
                    this.mUIValiationerrorDialog = new UIValiationerrorDialog(this);
                }
                return this.mUIValiationerrorDialog;
            }
        }
        #endregion
        
        #region Fields
        private UIValiationerrorDialog mUIValiationerrorDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIValiationerrorDialog : WinControl
    {
        
        public UIValiationerrorDialog(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Valiation error";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
            this.WindowTitles.Add("Valiation error");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "&OK";
                    this.mUIOKButton.WindowTitles.Add("Valiation error");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Context";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32768";
            #endregion
        }
        
        #region Properties
        public UIContextMenu UIContextMenu
        {
            get
            {
                if ((this.mUIContextMenu == null))
                {
                    this.mUIContextMenu = new UIContextMenu(this);
                }
                return this.mUIContextMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIContextMenu mUIContextMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIContextMenu : WinMenu
    {
        
        public UIContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Context";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICustomizeMenuItem
        {
            get
            {
                if ((this.mUICustomizeMenuItem == null))
                {
                    this.mUICustomizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICustomizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Customize...";
                    #endregion
                }
                return this.mUICustomizeMenuItem;
            }
        }
        
        public WinMenuItem UIOptionsMenuItem
        {
            get
            {
                if ((this.mUIOptionsMenuItem == null))
                {
                    this.mUIOptionsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOptionsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Options...";
                    #endregion
                }
                return this.mUIOptionsMenuItem;
            }
        }
        
        public WinMenuItem UIExitMenuItem
        {
            get
            {
                if ((this.mUIExitMenuItem == null))
                {
                    this.mUIExitMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIExitMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Exit";
                    #endregion
                }
                return this.mUIExitMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICustomizeMenuItem;
        
        private WinMenuItem mUIOptionsMenuItem;
        
        private WinMenuItem mUIExitMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICustomizeViewWindow : WinWindow
    {
        
        public UICustomizeViewWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Customize View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Customize View");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Customize View");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Customize View");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIFavoritesTreeItem UIFavoritesTreeItem
        {
            get
            {
                if ((this.mUIFavoritesTreeItem == null))
                {
                    this.mUIFavoritesTreeItem = new UIFavoritesTreeItem(this);
                }
                return this.mUIFavoritesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFavoritesTreeItem mUIFavoritesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFavoritesTreeItem : WinTreeItem
    {
        
        public UIFavoritesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Favorites";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDesktopTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopTreeItem.SearchProperties["Value"] = "1";
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDesktopTreeItem.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOptionsWindow : WinWindow
    {
        
        public UIOptionsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Options";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public UIOptionsTitleBar UIOptionsTitleBar
        {
            get
            {
                if ((this.mUIOptionsTitleBar == null))
                {
                    this.mUIOptionsTitleBar = new UIOptionsTitleBar(this);
                }
                return this.mUIOptionsTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIOptionsTitleBar mUIOptionsTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOptionsTitleBar : WinTitleBar
    {
        
        public UIOptionsTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Options");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Options");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
}
