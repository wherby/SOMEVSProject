// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace UIAutomation.UIMaps.CreateDiskWizardClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public partial class CreateDiskWizard
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinButton uIOpenButton = this.UICreateDiskWindow.UIItem65536Client.UIOpenButton;
            WinText uIItem65536Text = this.UICreateDiskWindow.UIItem65536Client.UIItem65536Text;
            WinList uIItem65536List = this.UIItemWindow14.UIBlockSizeComboBoxEdiWindow.UIPanel1Client.UIItem65536List;
            #endregion

            // Click 'Open' button
            Mouse.Click(uIOpenButton, new Point(9, 11));

            // Click '65536' label
            Mouse.Click(uIItem65536Text, new Point(90, 7));

            // Click 'Open' button
            Mouse.Click(uIOpenButton, new Point(9, 14));

            // Select '' in '65536' list box
            uIItem65536List.SelectedItemsAsString = this.RecordedMethod1Params.UIItem65536ListSelectedItemsAsString;
        }
        
        /// <summary>
        /// RecordedMethod2
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinTreeItem uINode0TreeItem = this.UIBrowseFolderWindow.UIDataPanelGroup.UINode0TreeItem;
            WinTreeItem uINode1TreeItem = this.UIBrowseFolderWindow.UIDataPanelGroup.UINode1TreeItem;
            WinTreeItem uINode5TreeItem = this.UIBrowseFolderWindow.UIDataPanelGroup.UINode5TreeItem;
            #endregion

            // Click 'Node0' tree item
            Mouse.Click(uINode0TreeItem, new Point(12, 10));

            // Click 'Node1' tree item
            Mouse.Click(uINode1TreeItem, new Point(26, 11));

            // Click 'Node5' tree item
            Mouse.Click(uINode5TreeItem, new Point(20, 12));

            // Click 'Node5' tree item
            Mouse.Click(uINode5TreeItem, new Point(28, 10));
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinCell uIItem10522254Cell = this.UIBrowseFolderWindow.UINode0TreeItem.UIItem10522254Cell;
            WinTree uIFolderTreeListTree = this.UIBrowseFolderWindow.UIBrowseFolderClient.UIFolderTreeListTree;
            #endregion

            // Click '10.5.222.54' cell
            Mouse.Click(uIItem10522254Cell, new Point(109, 4));

            // Type '*' in 'folderTreeList' tree
            Keyboard.SendKeys(uIFolderTreeListTree, this.RecordedMethod3Params.UIFolderTreeListTreeSendKeys, ModifierKeys.None);
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public UICreateDiskWindow UICreateDiskWindow
        {
            get
            {
                if ((this.mUICreateDiskWindow == null))
                {
                    this.mUICreateDiskWindow = new UICreateDiskWindow();
                }
                return this.mUICreateDiskWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow5 UIItemWindow5
        {
            get
            {
                if ((this.mUIItemWindow5 == null))
                {
                    this.mUIItemWindow5 = new UIItemWindow5();
                }
                return this.mUIItemWindow5;
            }
        }
        
        public UIItemWindow6 UIItemWindow6
        {
            get
            {
                if ((this.mUIItemWindow6 == null))
                {
                    this.mUIItemWindow6 = new UIItemWindow6();
                }
                return this.mUIItemWindow6;
            }
        }
        
        public UIItemWindow7 UIItemWindow7
        {
            get
            {
                if ((this.mUIItemWindow7 == null))
                {
                    this.mUIItemWindow7 = new UIItemWindow7();
                }
                return this.mUIItemWindow7;
            }
        }
        
        public UIItemWindow8 UIItemWindow8
        {
            get
            {
                if ((this.mUIItemWindow8 == null))
                {
                    this.mUIItemWindow8 = new UIItemWindow8();
                }
                return this.mUIItemWindow8;
            }
        }
        
        public UIBrowseFolderWindow UIBrowseFolderWindow
        {
            get
            {
                if ((this.mUIBrowseFolderWindow == null))
                {
                    this.mUIBrowseFolderWindow = new UIBrowseFolderWindow();
                }
                return this.mUIBrowseFolderWindow;
            }
        }
        
        public UIPleaseinputthenamefoWindow UIPleaseinputthenamefoWindow
        {
            get
            {
                if ((this.mUIPleaseinputthenamefoWindow == null))
                {
                    this.mUIPleaseinputthenamefoWindow = new UIPleaseinputthenamefoWindow();
                }
                return this.mUIPleaseinputthenamefoWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2();
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow9 UIItemWindow9
        {
            get
            {
                if ((this.mUIItemWindow9 == null))
                {
                    this.mUIItemWindow9 = new UIItemWindow9();
                }
                return this.mUIItemWindow9;
            }
        }
        
        public UIItemWindow10 UIItemWindow10
        {
            get
            {
                if ((this.mUIItemWindow10 == null))
                {
                    this.mUIItemWindow10 = new UIItemWindow10();
                }
                return this.mUIItemWindow10;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3();
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIItemWindow4 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow4();
                }
                return this.mUIItemWindow4;
            }
        }
        
        public UIItemWindow111 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow111();
                }
                return this.mUIItemWindow11;
            }
        }
        
        public UIItemWindow12 UIItemWindow12
        {
            get
            {
                if ((this.mUIItemWindow12 == null))
                {
                    this.mUIItemWindow12 = new UIItemWindow12();
                }
                return this.mUIItemWindow12;
            }
        }
        
        public UIItemWindow13 UIItemWindow13
        {
            get
            {
                if ((this.mUIItemWindow13 == null))
                {
                    this.mUIItemWindow13 = new UIItemWindow13();
                }
                return this.mUIItemWindow13;
            }
        }
        
        public UIItemWindow14 UIItemWindow14
        {
            get
            {
                if ((this.mUIItemWindow14 == null))
                {
                    this.mUIItemWindow14 = new UIItemWindow14();
                }
                return this.mUIItemWindow14;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private UICreateDiskWindow mUICreateDiskWindow;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIItemWindow5 mUIItemWindow5;
        
        private UIItemWindow6 mUIItemWindow6;
        
        private UIItemWindow7 mUIItemWindow7;
        
        private UIItemWindow8 mUIItemWindow8;
        
        private UIBrowseFolderWindow mUIBrowseFolderWindow;
        
        private UIPleaseinputthenamefoWindow mUIPleaseinputthenamefoWindow;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIItemWindow9 mUIItemWindow9;
        
        private UIItemWindow10 mUIItemWindow10;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UIItemWindow4 mUIItemWindow4;
        
        private UIItemWindow111 mUIItemWindow11;
        
        private UIItemWindow12 mUIItemWindow12;
        
        private UIItemWindow13 mUIItemWindow13;
        
        private UIItemWindow14 mUIItemWindow14;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Select '' in '65536' list box
        /// </summary>
        public string UIItem65536ListSelectedItemsAsString = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Type '*' in 'folderTreeList' tree
        /// </summary>
        public string UIFolderTreeListTreeSendKeys = "*";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICreateDiskWindow : WinWindow
    {
        
        public UICreateDiskWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Create Disk";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public UIItemStorageSystemClient UIItemStorageSystemClient
        {
            get
            {
                if ((this.mUIItemStorageSystemClient == null))
                {
                    this.mUIItemStorageSystemClient = new UIItemStorageSystemClient(this);
                }
                return this.mUIItemStorageSystemClient;
            }
        }
        
        public UIWizardTitleClient UIWizardTitleClient
        {
            get
            {
                if ((this.mUIWizardTitleClient == null))
                {
                    this.mUIWizardTitleClient = new UIWizardTitleClient(this);
                }
                return this.mUIWizardTitleClient;
            }
        }
        
        public UIDataPanelGroup UIDataPanelGroup
        {
            get
            {
                if ((this.mUIDataPanelGroup == null))
                {
                    this.mUIDataPanelGroup = new UIDataPanelGroup(this);
                }
                return this.mUIDataPanelGroup;
            }
        }
        
        public UILunNameComboBoxEditClient UILunNameComboBoxEditClient
        {
            get
            {
                if ((this.mUILunNameComboBoxEditClient == null))
                {
                    this.mUILunNameComboBoxEditClient = new UILunNameComboBoxEditClient(this);
                }
                return this.mUILunNameComboBoxEditClient;
            }
        }
        
        public UILunDescriptionComboBClient UILunDescriptionComboBClient
        {
            get
            {
                if ((this.mUILunDescriptionComboBClient == null))
                {
                    this.mUILunDescriptionComboBClient = new UILunDescriptionComboBClient(this);
                }
                return this.mUILunDescriptionComboBClient;
            }
        }
        
        public UINotApplicableClient UINotApplicableClient
        {
            get
            {
                if ((this.mUINotApplicableClient == null))
                {
                    this.mUINotApplicableClient = new UINotApplicableClient(this);
                }
                return this.mUINotApplicableClient;
            }
        }
        
        public UINotApplicableClient1 UINotApplicableClient1
        {
            get
            {
                if ((this.mUINotApplicableClient1 == null))
                {
                    this.mUINotApplicableClient1 = new UINotApplicableClient1(this);
                }
                return this.mUINotApplicableClient1;
            }
        }
        
        public UITableLayoutPanel1Window UITableLayoutPanel1Window
        {
            get
            {
                if ((this.mUITableLayoutPanel1Window == null))
                {
                    this.mUITableLayoutPanel1Window = new UITableLayoutPanel1Window(this);
                }
                return this.mUITableLayoutPanel1Window;
            }
        }
        
        public UIAutoClient UIAutoClient
        {
            get
            {
                if ((this.mUIAutoClient == null))
                {
                    this.mUIAutoClient = new UIAutoClient(this);
                }
                return this.mUIAutoClient;
            }
        }
        
        public UIProvisioningTypeRadiList UIProvisioningTypeRadiList
        {
            get
            {
                if ((this.mUIProvisioningTypeRadiList == null))
                {
                    this.mUIProvisioningTypeRadiList = new UIProvisioningTypeRadiList(this);
                }
                return this.mUIProvisioningTypeRadiList;
            }
        }
        
        public UIProvisioningTypeRadiList1 UIProvisioningTypeRadiList1
        {
            get
            {
                if ((this.mUIProvisioningTypeRadiList1 == null))
                {
                    this.mUIProvisioningTypeRadiList1 = new UIProvisioningTypeRadiList1(this);
                }
                return this.mUIProvisioningTypeRadiList1;
            }
        }
        
        public UIMBRClient UIMBRClient
        {
            get
            {
                if ((this.mUIMBRClient == null))
                {
                    this.mUIMBRClient = new UIMBRClient(this);
                }
                return this.mUIMBRClient;
            }
        }
        
        public UINTFSClient UINTFSClient
        {
            get
            {
                if ((this.mUINTFSClient == null))
                {
                    this.mUINTFSClient = new UINTFSClient(this);
                }
                return this.mUINTFSClient;
            }
        }
        
        public UIItem4096Client UIItem4096Client
        {
            get
            {
                if ((this.mUIItem4096Client == null))
                {
                    this.mUIItem4096Client = new UIItem4096Client(this);
                }
                return this.mUIItem4096Client;
            }
        }
        
        public UIPanel1Window UIPanel1Window
        {
            get
            {
                if ((this.mUIPanel1Window == null))
                {
                    this.mUIPanel1Window = new UIPanel1Window(this);
                }
                return this.mUIPanel1Window;
            }
        }
        
        public UIAvailableDriverLetteClient UIAvailableDriverLetteClient
        {
            get
            {
                if ((this.mUIAvailableDriverLetteClient == null))
                {
                    this.mUIAvailableDriverLetteClient = new UIAvailableDriverLetteClient(this);
                }
                return this.mUIAvailableDriverLetteClient;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIMBClient UIMBClient
        {
            get
            {
                if ((this.mUIMBClient == null))
                {
                    this.mUIMBClient = new UIMBClient(this);
                }
                return this.mUIMBClient;
            }
        }
        
        public UIItem65536Client UIItem65536Client
        {
            get
            {
                if ((this.mUIItem65536Client == null))
                {
                    this.mUIItem65536Client = new UIItem65536Client(this);
                }
                return this.mUIItem65536Client;
            }
        }
        #endregion
        
        #region Fields
        private UIItemStorageSystemClient mUIItemStorageSystemClient;
        
        private UIWizardTitleClient mUIWizardTitleClient;
        
        private UIDataPanelGroup mUIDataPanelGroup;
        
        private UILunNameComboBoxEditClient mUILunNameComboBoxEditClient;
        
        private UILunDescriptionComboBClient mUILunDescriptionComboBClient;
        
        private UINotApplicableClient mUINotApplicableClient;
        
        private UINotApplicableClient1 mUINotApplicableClient1;
        
        private UITableLayoutPanel1Window mUITableLayoutPanel1Window;
        
        private UIAutoClient mUIAutoClient;
        
        private UIProvisioningTypeRadiList mUIProvisioningTypeRadiList;
        
        private UIProvisioningTypeRadiList1 mUIProvisioningTypeRadiList1;
        
        private UIMBRClient mUIMBRClient;
        
        private UINTFSClient mUINTFSClient;
        
        private UIItem4096Client mUIItem4096Client;
        
        private UIPanel1Window mUIPanel1Window;
        
        private UIAvailableDriverLetteClient mUIAvailableDriverLetteClient;
        
        private UIItemWindow mUIItemWindow;
        
        private UIMBClient mUIMBClient;
        
        private UIItem65536Client mUIItem65536Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemStorageSystemClient : WinClient
    {
        
        public UIItemStorageSystemClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinControl.PropertyNames.Name, " - ", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIWizardTitleClient : WinClient
    {
        
        public UIWizardTitleClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Wizard Title";
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public WinButton UINextButton
        {
            get
            {
                if ((this.mUINextButton == null))
                {
                    this.mUINextButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINextButton.SearchProperties[WinButton.PropertyNames.Name] = "&Next >";
                    this.mUINextButton.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUINextButton;
            }
        }
        
        public WinButton UIFinishButton
        {
            get
            {
                if ((this.mUIFinishButton == null))
                {
                    this.mUIFinishButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIFinishButton.SearchProperties[WinButton.PropertyNames.Name] = "&Finish";
                    this.mUIFinishButton.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUIFinishButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINextButton;
        
        private WinButton mUIFinishButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataPanelGroup : WinGroup
    {
        
        public UIDataPanelGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UINode2TreeItem
        {
            get
            {
                if ((this.mUINode2TreeItem == null))
                {
                    this.mUINode2TreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUINode2TreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Node2";
                    this.mUINode2TreeItem.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUINode2TreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUINode2TreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILunNameComboBoxEditClient : WinClient
    {
        
        public UILunNameComboBoxEditClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        
        public WinEdit UILunNameComboBoxEditEdit
        {
            get
            {
                if ((this.mUILunNameComboBoxEditEdit == null))
                {
                    this.mUILunNameComboBoxEditEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUILunNameComboBoxEditEdit.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUILunNameComboBoxEditEdit;
            }
        }
        
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        
        private WinEdit mUILunNameComboBoxEditEdit;
        
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILunDescriptionComboBClient : WinClient
    {
        
        public UILunDescriptionComboBClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINotApplicableClient : WinClient
    {
        
        public UINotApplicableClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "<Not Applicable>";
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public WinEdit UILunNameComboBoxEditEdit
        {
            get
            {
                if ((this.mUILunNameComboBoxEditEdit == null))
                {
                    this.mUILunNameComboBoxEditEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUILunNameComboBoxEditEdit.SearchProperties[WinEdit.PropertyNames.Name] = "<Not Applicable>";
                    this.mUILunNameComboBoxEditEdit.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUILunNameComboBoxEditEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUILunNameComboBoxEditEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINotApplicableClient1 : WinClient
    {
        
        public UINotApplicableClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "<Not Applicable>";
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public WinEdit UILunDescriptionComboBEdit
        {
            get
            {
                if ((this.mUILunDescriptionComboBEdit == null))
                {
                    this.mUILunDescriptionComboBEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUILunDescriptionComboBEdit.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUILunDescriptionComboBEdit;
            }
        }
        
        public WinEdit UINotApplicableEdit
        {
            get
            {
                if ((this.mUINotApplicableEdit == null))
                {
                    this.mUINotApplicableEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINotApplicableEdit.SearchProperties[WinEdit.PropertyNames.Name] = "<Not Applicable>";
                    this.mUINotApplicableEdit.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUINotApplicableEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUILunDescriptionComboBEdit;
        
        private WinEdit mUINotApplicableEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITableLayoutPanel1Window : WinWindow
    {
        
        public UITableLayoutPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tableLayoutPanel1";
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public WinEdit UILunSizeTextEditEdit
        {
            get
            {
                if ((this.mUILunSizeTextEditEdit == null))
                {
                    this.mUILunSizeTextEditEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUILunSizeTextEditEdit.SearchProperties[WinEdit.PropertyNames.Name] = "1024";
                    this.mUILunSizeTextEditEdit.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUILunSizeTextEditEdit;
            }
        }
        
        public WinEdit UIItem1024Edit
        {
            get
            {
                if ((this.mUIItem1024Edit == null))
                {
                    this.mUIItem1024Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItem1024Edit.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUIItem1024Edit;
            }
        }
        
        public WinClient UIMBClient
        {
            get
            {
                if ((this.mUIMBClient == null))
                {
                    this.mUIMBClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIMBClient.SearchProperties[WinControl.PropertyNames.Name] = "MB";
                    this.mUIMBClient.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUIMBClient;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUILunSizeTextEditEdit;
        
        private WinEdit mUIItem1024Edit;
        
        private WinClient mUIMBClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAutoClient : WinClient
    {
        
        public UIAutoClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Auto";
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIProvisioningTypeRadiList : WinList
    {
        
        public UIProvisioningTypeRadiList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Thin";
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public WinListItem UIThickListItem
        {
            get
            {
                if ((this.mUIThickListItem == null))
                {
                    this.mUIThickListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIThickListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Thick";
                    this.mUIThickListItem.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUIThickListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIThickListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIProvisioningTypeRadiList1 : WinList
    {
        
        public UIProvisioningTypeRadiList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Thick";
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public WinListItem UIThinListItem
        {
            get
            {
                if ((this.mUIThinListItem == null))
                {
                    this.mUIThinListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIThinListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Thin";
                    this.mUIThinListItem.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUIThinListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIThinListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMBRClient : WinClient
    {
        
        public UIMBRClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINTFSClient : WinClient
    {
        
        public UINTFSClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "NTFS";
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItem4096Client : WinClient
    {
        
        public UIItem4096Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "4096";
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel1Window : WinWindow
    {
        
        public UIPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel1";
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public WinEdit UIVolumeLabelTextEditEdit
        {
            get
            {
                if ((this.mUIVolumeLabelTextEditEdit == null))
                {
                    this.mUIVolumeLabelTextEditEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIVolumeLabelTextEditEdit.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUIVolumeLabelTextEditEdit;
            }
        }
        
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        
        public WinRadioButton UIMountPathRadioButton
        {
            get
            {
                if ((this.mUIMountPathRadioButton == null))
                {
                    this.mUIMountPathRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIMountPathRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Mount Path:";
                    this.mUIMountPathRadioButton.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUIMountPathRadioButton;
            }
        }
        
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "...";
                    this.mUIItemButton.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIVolumeLabelTextEditEdit;
        
        private WinEdit mUIItemEdit;
        
        private WinRadioButton mUIMountPathRadioButton;
        
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAvailableDriverLetteClient : WinClient
    {
        
        public UIAvailableDriverLetteClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "7";
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public WinClient UINavBarControlClient
        {
            get
            {
                if ((this.mUINavBarControlClient == null))
                {
                    this.mUINavBarControlClient = new WinClient(this);
                    #region Search Criteria
                    this.mUINavBarControlClient.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUINavBarControlClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUINavBarControlClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMBClient : WinClient
    {
        
        public UIMBClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "MB";
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItem65536Client : WinClient
    {
        
        public UIItem65536Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "65536";
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        
        public WinText UIItem65536Text
        {
            get
            {
                if ((this.mUIItem65536Text == null))
                {
                    this.mUIItem65536Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem65536Text.SearchProperties[WinText.PropertyNames.Name] = "65536";
                    this.mUIItem65536Text.WindowTitles.Add("Create Disk");
                    #endregion
                }
                return this.mUIItem65536Text;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        
        private WinText mUIItem65536Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.AccessibleName, " - ", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new WinClient(this);
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UILunNameComboBoxEditWindow UILunNameComboBoxEditWindow
        {
            get
            {
                if ((this.mUILunNameComboBoxEditWindow == null))
                {
                    this.mUILunNameComboBoxEditWindow = new UILunNameComboBoxEditWindow(this);
                }
                return this.mUILunNameComboBoxEditWindow;
            }
        }
        
        public UINotApplicableList UINotApplicableList
        {
            get
            {
                if ((this.mUINotApplicableList == null))
                {
                    this.mUINotApplicableList = new UINotApplicableList(this);
                }
                return this.mUINotApplicableList;
            }
        }
        #endregion
        
        #region Fields
        private UILunNameComboBoxEditWindow mUILunNameComboBoxEditWindow;
        
        private UINotApplicableList mUINotApplicableList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILunNameComboBoxEditWindow : WinWindow
    {
        
        public UILunNameComboBoxEditWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lunNameComboBoxEdit";
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public UITableLayoutPanel1Client UITableLayoutPanel1Client
        {
            get
            {
                if ((this.mUITableLayoutPanel1Client == null))
                {
                    this.mUITableLayoutPanel1Client = new UITableLayoutPanel1Client(this);
                }
                return this.mUITableLayoutPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private UITableLayoutPanel1Client mUITableLayoutPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITableLayoutPanel1Client : WinClient
    {
        
        public UITableLayoutPanel1Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinList UINotApplicableList
        {
            get
            {
                if ((this.mUINotApplicableList == null))
                {
                    this.mUINotApplicableList = new WinList(this);
                    #region Search Criteria
                    this.mUINotApplicableList.SearchProperties[WinList.PropertyNames.Name] = "<Not Applicable>";
                    #endregion
                }
                return this.mUINotApplicableList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUINotApplicableList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINotApplicableList : WinList
    {
        
        public UINotApplicableList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "<Not Applicable>";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public WinListItem UINotApplicableListItem
        {
            get
            {
                if ((this.mUINotApplicableListItem == null))
                {
                    this.mUINotApplicableListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUINotApplicableListItem.SearchProperties[WinListItem.PropertyNames.Name] = "<Not Applicable>";
                    this.mUINotApplicableListItem.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    #endregion
                }
                return this.mUINotApplicableListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUINotApplicableListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "GPT";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIItemClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new UIItemClient(this);
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private UIItemClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemClient : WinClient
    {
        
        public UIItemClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinList UIGPTList
        {
            get
            {
                if ((this.mUIGPTList == null))
                {
                    this.mUIGPTList = new WinList(this);
                    #region Search Criteria
                    this.mUIGPTList.SearchProperties[WinList.PropertyNames.Name] = "GPT";
                    #endregion
                }
                return this.mUIGPTList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIGPTList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "FAT32";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIItemClient1 UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new UIItemClient1(this);
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private UIItemClient1 mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemClient1 : WinClient
    {
        
        public UIItemClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinList UIFAT32List
        {
            get
            {
                if ((this.mUIFAT32List == null))
                {
                    this.mUIFAT32List = new WinList(this);
                    #region Search Criteria
                    this.mUIFAT32List.SearchProperties[WinList.PropertyNames.Name] = "FAT32";
                    #endregion
                }
                return this.mUIFAT32List;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIFAT32List;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow7 : WinWindow
    {
        
        public UIItemWindow7()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "8192";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIItemClient2 UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new UIItemClient2(this);
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private UIItemClient2 mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemClient2 : WinClient
    {
        
        public UIItemClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinList UIItem8192List
        {
            get
            {
                if ((this.mUIItem8192List == null))
                {
                    this.mUIItem8192List = new WinList(this);
                    #region Search Criteria
                    this.mUIItem8192List.SearchProperties[WinList.PropertyNames.Name] = "8192";
                    #endregion
                }
                return this.mUIItem8192List;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItem8192List;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow8 : WinWindow
    {
        
        public UIItemWindow8()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "V";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIItemClient3 UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new UIItemClient3(this);
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private UIItemClient3 mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemClient3 : WinClient
    {
        
        public UIItemClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinList UIVList
        {
            get
            {
                if ((this.mUIVList == null))
                {
                    this.mUIVList = new WinList(this);
                    #region Search Criteria
                    this.mUIVList.SearchProperties[WinList.PropertyNames.Name] = "V";
                    #endregion
                }
                return this.mUIVList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIVList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBrowseFolderWindow : WinWindow
    {
        
        public UIBrowseFolderWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Browse Folder";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Browse Folder");
            #endregion
        }
        
        #region Properties
        public UIDataPanelGroup1 UIDataPanelGroup
        {
            get
            {
                if ((this.mUIDataPanelGroup == null))
                {
                    this.mUIDataPanelGroup = new UIDataPanelGroup1(this);
                }
                return this.mUIDataPanelGroup;
            }
        }
        
        public UINode4TreeItem UINode4TreeItem
        {
            get
            {
                if ((this.mUINode4TreeItem == null))
                {
                    this.mUINode4TreeItem = new UINode4TreeItem(this);
                }
                return this.mUINode4TreeItem;
            }
        }
        
        public UIBrowseFolderClient UIBrowseFolderClient
        {
            get
            {
                if ((this.mUIBrowseFolderClient == null))
                {
                    this.mUIBrowseFolderClient = new UIBrowseFolderClient(this);
                }
                return this.mUIBrowseFolderClient;
            }
        }
        
        public UINode6TreeItem UINode6TreeItem
        {
            get
            {
                if ((this.mUINode6TreeItem == null))
                {
                    this.mUINode6TreeItem = new UINode6TreeItem(this);
                }
                return this.mUINode6TreeItem;
            }
        }
        
        public UINode1TreeItem UINode1TreeItem
        {
            get
            {
                if ((this.mUINode1TreeItem == null))
                {
                    this.mUINode1TreeItem = new UINode1TreeItem(this);
                }
                return this.mUINode1TreeItem;
            }
        }
        
        public UINode0TreeItem UINode0TreeItem
        {
            get
            {
                if ((this.mUINode0TreeItem == null))
                {
                    this.mUINode0TreeItem = new UINode0TreeItem(this);
                }
                return this.mUINode0TreeItem;
            }
        }
        
        public UINode2TreeItem UINode2TreeItem
        {
            get
            {
                if ((this.mUINode2TreeItem == null))
                {
                    this.mUINode2TreeItem = new UINode2TreeItem(this);
                }
                return this.mUINode2TreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDataPanelGroup1 mUIDataPanelGroup;
        
        private UINode4TreeItem mUINode4TreeItem;
        
        private UIBrowseFolderClient mUIBrowseFolderClient;
        
        private UINode6TreeItem mUINode6TreeItem;
        
        private UINode1TreeItem mUINode1TreeItem;
        
        private UINode0TreeItem mUINode0TreeItem;
        
        private UINode2TreeItem mUINode2TreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataPanelGroup1 : WinGroup
    {
        
        public UIDataPanelGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
            this.WindowTitles.Add("Browse Folder");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UINode0TreeItem
        {
            get
            {
                if ((this.mUINode0TreeItem == null))
                {
                    this.mUINode0TreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUINode0TreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Node0";
                    this.mUINode0TreeItem.WindowTitles.Add("Browse Folder");
                    #endregion
                }
                return this.mUINode0TreeItem;
            }
        }
        
        public WinTreeItem UINode1TreeItem
        {
            get
            {
                if ((this.mUINode1TreeItem == null))
                {
                    this.mUINode1TreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUINode1TreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Node1";
                    this.mUINode1TreeItem.WindowTitles.Add("Browse Folder");
                    #endregion
                }
                return this.mUINode1TreeItem;
            }
        }
        
        public WinTreeItem UINode3TreeItem
        {
            get
            {
                if ((this.mUINode3TreeItem == null))
                {
                    this.mUINode3TreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUINode3TreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Node3";
                    this.mUINode3TreeItem.WindowTitles.Add("Browse Folder");
                    #endregion
                }
                return this.mUINode3TreeItem;
            }
        }
        
        public WinTreeItem UINode5TreeItem
        {
            get
            {
                if ((this.mUINode5TreeItem == null))
                {
                    this.mUINode5TreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUINode5TreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Node5";
                    this.mUINode5TreeItem.WindowTitles.Add("Browse Folder");
                    #endregion
                }
                return this.mUINode5TreeItem;
            }
        }
        
        public WinTreeItem UINode4TreeItem
        {
            get
            {
                if ((this.mUINode4TreeItem == null))
                {
                    this.mUINode4TreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUINode4TreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Node4";
                    this.mUINode4TreeItem.WindowTitles.Add("Browse Folder");
                    #endregion
                }
                return this.mUINode4TreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUINode0TreeItem;
        
        private WinTreeItem mUINode1TreeItem;
        
        private WinTreeItem mUINode3TreeItem;
        
        private WinTreeItem mUINode5TreeItem;
        
        private WinTreeItem mUINode4TreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINode4TreeItem : WinTreeItem
    {
        
        public UINode4TreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Node4";
            this.WindowTitles.Add("Browse Folder");
            #endregion
        }
        
        #region Properties
        public WinCell UIFCell
        {
            get
            {
                if ((this.mUIFCell == null))
                {
                    this.mUIFCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFCell.SearchProperties[WinCell.PropertyNames.Value] = "F";
                    this.mUIFCell.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIFCell.WindowTitles.Add("Browse Folder");
                    #endregion
                }
                return this.mUIFCell;
            }
        }
        
        public WinCell UICCell
        {
            get
            {
                if ((this.mUICCell == null))
                {
                    this.mUICCell = new WinCell(this);
                    #region Search Criteria
                    this.mUICCell.SearchProperties[WinCell.PropertyNames.Value] = "C";
                    this.mUICCell.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICCell.WindowTitles.Add("Browse Folder");
                    #endregion
                }
                return this.mUICCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFCell;
        
        private WinCell mUICCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBrowseFolderClient : WinClient
    {
        
        public UIBrowseFolderClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Browse Folder";
            this.WindowTitles.Add("Browse Folder");
            #endregion
        }
        
        #region Properties
        public WinButton UICreateFolderButton
        {
            get
            {
                if ((this.mUICreateFolderButton == null))
                {
                    this.mUICreateFolderButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICreateFolderButton.SearchProperties[WinButton.PropertyNames.Name] = "Create Folder";
                    this.mUICreateFolderButton.WindowTitles.Add("Browse Folder");
                    #endregion
                }
                return this.mUICreateFolderButton;
            }
        }
        
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Browse Folder");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        
        public WinTree UIFolderTreeListTree
        {
            get
            {
                if ((this.mUIFolderTreeListTree == null))
                {
                    this.mUIFolderTreeListTree = new WinTree(this);
                    #region Search Criteria
                    this.mUIFolderTreeListTree.WindowTitles.Add("Browse Folder");
                    #endregion
                }
                return this.mUIFolderTreeListTree;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICreateFolderButton;
        
        private WinButton mUIOKButton;
        
        private WinTree mUIFolderTreeListTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINode6TreeItem : WinTreeItem
    {
        
        public UINode6TreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Node6";
            this.WindowTitles.Add("Browse Folder");
            #endregion
        }
        
        #region Properties
        public WinCell UINew_diskCell
        {
            get
            {
                if ((this.mUINew_diskCell == null))
                {
                    this.mUINew_diskCell = new WinCell(this);
                    #region Search Criteria
                    this.mUINew_diskCell.SearchProperties[WinCell.PropertyNames.Value] = "new_disk";
                    this.mUINew_diskCell.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINew_diskCell.WindowTitles.Add("Browse Folder");
                    #endregion
                }
                return this.mUINew_diskCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUINew_diskCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINode1TreeItem : WinTreeItem
    {
        
        public UINode1TreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Node1";
            this.WindowTitles.Add("Browse Folder");
            #endregion
        }
        
        #region Properties
        public WinCell UICCell
        {
            get
            {
                if ((this.mUICCell == null))
                {
                    this.mUICCell = new WinCell(this);
                    #region Search Criteria
                    this.mUICCell.SearchProperties[WinCell.PropertyNames.Value] = "C";
                    this.mUICCell.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICCell.WindowTitles.Add("Browse Folder");
                    #endregion
                }
                return this.mUICCell;
            }
        }
        
        public WinCell UIBCell
        {
            get
            {
                if ((this.mUIBCell == null))
                {
                    this.mUIBCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIBCell.SearchProperties[WinCell.PropertyNames.Value] = "B";
                    this.mUIBCell.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIBCell.WindowTitles.Add("Browse Folder");
                    #endregion
                }
                return this.mUIBCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUICCell;
        
        private WinCell mUIBCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINode0TreeItem : WinTreeItem
    {
        
        public UINode0TreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Node0";
            this.WindowTitles.Add("Browse Folder");
            #endregion
        }
        
        #region Properties
        public WinCell UIItem10522269Cell
        {
            get
            {
                if ((this.mUIItem10522269Cell == null))
                {
                    this.mUIItem10522269Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem10522269Cell.SearchProperties[WinCell.PropertyNames.Value] = "10.5.222.69";
                    this.mUIItem10522269Cell.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIItem10522269Cell.WindowTitles.Add("Browse Folder");
                    #endregion
                }
                return this.mUIItem10522269Cell;
            }
        }
        
        public WinCell UIItem10522254Cell
        {
            get
            {
                if ((this.mUIItem10522254Cell == null))
                {
                    this.mUIItem10522254Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem10522254Cell.SearchProperties[WinCell.PropertyNames.Value] = "10.5.222.54";
                    this.mUIItem10522254Cell.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIItem10522254Cell.WindowTitles.Add("Browse Folder");
                    #endregion
                }
                return this.mUIItem10522254Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIItem10522269Cell;
        
        private WinCell mUIItem10522254Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINode2TreeItem : WinTreeItem
    {
        
        public UINode2TreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Node2";
            this.WindowTitles.Add("Browse Folder");
            #endregion
        }
        
        #region Properties
        public WinCell UIRECYCLEBINCell
        {
            get
            {
                if ((this.mUIRECYCLEBINCell == null))
                {
                    this.mUIRECYCLEBINCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIRECYCLEBINCell.SearchProperties[WinCell.PropertyNames.Value] = "$RECYCLE.BIN";
                    this.mUIRECYCLEBINCell.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIRECYCLEBINCell.WindowTitles.Add("Browse Folder");
                    #endregion
                }
                return this.mUIRECYCLEBINCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIRECYCLEBINCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPleaseinputthenamefoWindow : WinWindow
    {
        
        public UIPleaseinputthenamefoWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Please input the name for the new folder";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Please input the name for the new folder");
            #endregion
        }
        
        #region Properties
        public UIPleaseinputthenamefoClient UIPleaseinputthenamefoClient
        {
            get
            {
                if ((this.mUIPleaseinputthenamefoClient == null))
                {
                    this.mUIPleaseinputthenamefoClient = new UIPleaseinputthenamefoClient(this);
                }
                return this.mUIPleaseinputthenamefoClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPleaseinputthenamefoClient mUIPleaseinputthenamefoClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPleaseinputthenamefoClient : WinClient
    {
        
        public UIPleaseinputthenamefoClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Please input the name for the new folder";
            this.WindowTitles.Add("Please input the name for the new folder");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Please input the name for the new folder");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Please input the name for the new folder");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.AccessibleName, "B", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIMBList UIMBList
        {
            get
            {
                if ((this.mUIMBList == null))
                {
                    this.mUIMBList = new UIMBList(this);
                }
                return this.mUIMBList;
            }
        }
        
        public UIGBList UIGBList
        {
            get
            {
                if ((this.mUIGBList == null))
                {
                    this.mUIGBList = new UIGBList(this);
                }
                return this.mUIGBList;
            }
        }
        #endregion
        
        #region Fields
        private UIMBList mUIMBList;
        
        private UIGBList mUIGBList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMBList : WinList
    {
        
        public UIMBList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "MB";
            #endregion
        }
        
        #region Properties
        public WinListItem UIMBListItem
        {
            get
            {
                if ((this.mUIMBListItem == null))
                {
                    this.mUIMBListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIMBListItem.SearchProperties[WinListItem.PropertyNames.Name] = "MB";
                    #endregion
                }
                return this.mUIMBListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIMBListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIGBList : WinList
    {
        
        public UIGBList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "GB";
            #endregion
        }
        
        #region Properties
        public WinListItem UIGBListItem
        {
            get
            {
                if ((this.mUIGBListItem == null))
                {
                    this.mUIGBListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIGBListItem.SearchProperties[WinListItem.PropertyNames.Name] = "GB";
                    #endregion
                }
                return this.mUIGBListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIGBListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow9 : WinWindow
    {
        
        public UIItemWindow9()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UINotApplicableList1 UINotApplicableList
        {
            get
            {
                if ((this.mUINotApplicableList == null))
                {
                    this.mUINotApplicableList = new UINotApplicableList1(this);
                }
                return this.mUINotApplicableList;
            }
        }
        #endregion
        
        #region Fields
        private UINotApplicableList1 mUINotApplicableList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINotApplicableList1 : WinList
    {
        
        public UINotApplicableList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "<Not Applicable>";
            #endregion
        }
        
        #region Properties
        public WinListItem UINotApplicableListItem
        {
            get
            {
                if ((this.mUINotApplicableListItem == null))
                {
                    this.mUINotApplicableListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUINotApplicableListItem.SearchProperties[WinListItem.PropertyNames.Name] = "<Not Applicable>";
                    #endregion
                }
                return this.mUINotApplicableListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUINotApplicableListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow10 : WinWindow
    {
        
        public UIItemWindow10()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Auto";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIAutoList UIAutoList
        {
            get
            {
                if ((this.mUIAutoList == null))
                {
                    this.mUIAutoList = new UIAutoList(this);
                }
                return this.mUIAutoList;
            }
        }
        
        public UISPAList UISPAList
        {
            get
            {
                if ((this.mUISPAList == null))
                {
                    this.mUISPAList = new UISPAList(this);
                }
                return this.mUISPAList;
            }
        }
        
        public UISPBList UISPBList
        {
            get
            {
                if ((this.mUISPBList == null))
                {
                    this.mUISPBList = new UISPBList(this);
                }
                return this.mUISPBList;
            }
        }
        #endregion
        
        #region Fields
        private UIAutoList mUIAutoList;
        
        private UISPAList mUISPAList;
        
        private UISPBList mUISPBList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAutoList : WinList
    {
        
        public UIAutoList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Auto";
            #endregion
        }
        
        #region Properties
        public WinListItem UIAutoListItem
        {
            get
            {
                if ((this.mUIAutoListItem == null))
                {
                    this.mUIAutoListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIAutoListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Auto";
                    #endregion
                }
                return this.mUIAutoListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIAutoListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISPAList : WinList
    {
        
        public UISPAList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "SPA";
            #endregion
        }
        
        #region Properties
        public WinListItem UISPAListItem
        {
            get
            {
                if ((this.mUISPAListItem == null))
                {
                    this.mUISPAListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISPAListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SPA";
                    #endregion
                }
                return this.mUISPAListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISPAListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISPBList : WinList
    {
        
        public UISPBList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "SPB";
            #endregion
        }
        
        #region Properties
        public WinListItem UISPBListItem
        {
            get
            {
                if ((this.mUISPBListItem == null))
                {
                    this.mUISPBListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISPBListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SPB";
                    #endregion
                }
                return this.mUISPBListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISPBListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIMBRList UIMBRList
        {
            get
            {
                if ((this.mUIMBRList == null))
                {
                    this.mUIMBRList = new UIMBRList(this);
                }
                return this.mUIMBRList;
            }
        }
        
        public UIGPTList UIGPTList
        {
            get
            {
                if ((this.mUIGPTList == null))
                {
                    this.mUIGPTList = new UIGPTList(this);
                }
                return this.mUIGPTList;
            }
        }
        #endregion
        
        #region Fields
        private UIMBRList mUIMBRList;
        
        private UIGPTList mUIGPTList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMBRList : WinList
    {
        
        public UIMBRList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "MBR";
            #endregion
        }
        
        #region Properties
        public WinListItem UIMBRListItem
        {
            get
            {
                if ((this.mUIMBRListItem == null))
                {
                    this.mUIMBRListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIMBRListItem.SearchProperties[WinListItem.PropertyNames.Name] = "MBR";
                    #endregion
                }
                return this.mUIMBRListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIMBRListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIGPTList : WinList
    {
        
        public UIGPTList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "GPT";
            #endregion
        }
        
        #region Properties
        public WinListItem UIGPTListItem
        {
            get
            {
                if ((this.mUIGPTListItem == null))
                {
                    this.mUIGPTListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIGPTListItem.SearchProperties[WinListItem.PropertyNames.Name] = "GPT";
                    #endregion
                }
                return this.mUIGPTListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIGPTListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UINTFSList UINTFSList
        {
            get
            {
                if ((this.mUINTFSList == null))
                {
                    this.mUINTFSList = new UINTFSList(this);
                }
                return this.mUINTFSList;
            }
        }
        
        public UIFAT32List UIFAT32List
        {
            get
            {
                if ((this.mUIFAT32List == null))
                {
                    this.mUIFAT32List = new UIFAT32List(this);
                }
                return this.mUIFAT32List;
            }
        }
        #endregion
        
        #region Fields
        private UINTFSList mUINTFSList;
        
        private UIFAT32List mUIFAT32List;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINTFSList : WinList
    {
        
        public UINTFSList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "NTFS";
            #endregion
        }
        
        #region Properties
        public WinListItem UINTFSListItem
        {
            get
            {
                if ((this.mUINTFSListItem == null))
                {
                    this.mUINTFSListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUINTFSListItem.SearchProperties[WinListItem.PropertyNames.Name] = "NTFS";
                    #endregion
                }
                return this.mUINTFSListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUINTFSListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIFAT32List : WinList
    {
        
        public UIFAT32List(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "FAT32";
            #endregion
        }
        
        #region Properties
        public WinListItem UIFAT32ListItem
        {
            get
            {
                if ((this.mUIFAT32ListItem == null))
                {
                    this.mUIFAT32ListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIFAT32ListItem.SearchProperties[WinListItem.PropertyNames.Name] = "FAT32";
                    #endregion
                }
                return this.mUIFAT32ListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIFAT32ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow111 : WinWindow
    {
        
        public UIItemWindow111()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "G";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIGList UIGList
        {
            get
            {
                if ((this.mUIGList == null))
                {
                    this.mUIGList = new UIGList(this);
                }
                return this.mUIGList;
            }
        }
        #endregion
        
        #region Fields
        private UIGList mUIGList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIGList : WinList
    {
        
        public UIGList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "G";
            #endregion
        }
        
        #region Properties
        public WinListItem UIGListItem
        {
            get
            {
                if ((this.mUIGListItem == null))
                {
                    this.mUIGListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIGListItem.SearchProperties[WinListItem.PropertyNames.Name] = "G";
                    #endregion
                }
                return this.mUIGListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIGListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow13 : WinWindow
    {
        
        public UIItemWindow13()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIScrollbarScrollBar UIScrollbarScrollBar
        {
            get
            {
                if ((this.mUIScrollbarScrollBar == null))
                {
                    this.mUIScrollbarScrollBar = new UIScrollbarScrollBar(this);
                }
                return this.mUIScrollbarScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private UIScrollbarScrollBar mUIScrollbarScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIScrollbarScrollBar : WinScrollBar
    {
        
        public UIScrollbarScrollBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinScrollBar.PropertyNames.Name] = "scroll bar";
            #endregion
        }
        
        #region Properties
        public WinControl UIPositionIndicator
        {
            get
            {
                if ((this.mUIPositionIndicator == null))
                {
                    this.mUIPositionIndicator = new WinControl(this);
                    #region Search Criteria
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.Name] = "Position";
                    this.mUIPositionIndicator.SearchProperties[UITestControl.PropertyNames.ControlType] = "Indicator";
                    #endregion
                }
                return this.mUIPositionIndicator;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIPositionIndicator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow14 : WinWindow
    {
        
        public UIItemWindow14()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "4096";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIBlockSizeComboBoxEdiWindow UIBlockSizeComboBoxEdiWindow
        {
            get
            {
                if ((this.mUIBlockSizeComboBoxEdiWindow == null))
                {
                    this.mUIBlockSizeComboBoxEdiWindow = new UIBlockSizeComboBoxEdiWindow(this);
                }
                return this.mUIBlockSizeComboBoxEdiWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIBlockSizeComboBoxEdiWindow mUIBlockSizeComboBoxEdiWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBlockSizeComboBoxEdiWindow : WinWindow
    {
        
        public UIBlockSizeComboBoxEdiWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "blockSizeComboBoxEdit";
            this.WindowTitles.Add("Create Disk");
            #endregion
        }
        
        #region Properties
        public UIPanel1Client UIPanel1Client
        {
            get
            {
                if ((this.mUIPanel1Client == null))
                {
                    this.mUIPanel1Client = new UIPanel1Client(this);
                }
                return this.mUIPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private UIPanel1Client mUIPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanel1Client : WinClient
    {
        
        public UIPanel1Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinList UIItem65536List
        {
            get
            {
                if ((this.mUIItem65536List == null))
                {
                    this.mUIItem65536List = new WinList(this);
                    #region Search Criteria
                    this.mUIItem65536List.SearchProperties[WinList.PropertyNames.Name] = "65536";
                    #endregion
                }
                return this.mUIItem65536List;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItem65536List;
        #endregion
    }
}
