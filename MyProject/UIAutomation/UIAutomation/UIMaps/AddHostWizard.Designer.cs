// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace UIAutomation.UIMaps.AddHostWizardClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public partial class AddHostWizard
    {
        
        /// <summary>
        /// addhostsystem - Use 'addhostsystemParams' to pass parameters into this method.
        /// </summary>
        public void addhostsystem()
        {
            #region Variable Declarations
            WinButton uIAddHostSystemButton = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIActionsPane.UIAddHostSystemButton;
            WinEdit uIHostNameTextEditEdit = this.UIAddHostWindow.UIPanelControl1Pane.UIHostNameTextEditEdit;
            WinEdit uIItemEdit = this.UIAddHostWindow.UIPanelControl1Pane.UIItemEdit;
            WinEdit uIIpAddressComboBoxEdiEdit = this.UIAddHostWindow.UIPanelControl1Pane.UIIpAddressComboBoxEdiEdit;
            WinEdit uIItem0001Edit = this.UIAddHostWindow.UIPanelControl1Pane.UIItem0001Edit;
            WinRadioButton uICurrentCredentialsRadioButton = this.UIAddHostWindow.UIPanelControl1Pane.UICurrentCredentialsRadioButton;
            WinRadioButton uISpecifyCredentialsRadioButton = this.UIAddHostWindow.UIPanelControl1Pane.UISpecifyCredentialsRadioButton;
            WinEdit uIUserNameTextEditEdit = this.UIAddHostWindow.UIGroupBox1Window.UIUserNameTextEditEdit;
            WinEdit uIItemEdit1 = this.UIAddHostWindow.UIGroupBox1Window.UIItemEdit;
            WinEdit uIPasswordTextEditEdit = this.UIAddHostWindow.UIGroupBox1Window.UIPasswordTextEditEdit;
            WinButton uITestConnectionButton = this.UIAddHostWindow.UITestConnectionWindow.UITestConnectionButton;
            WinTitleBar uIUnabletoconnectthesyTitleBar = this.UIUnabletoconnectthesyWindow.UIUnabletoconnectthesyTitleBar;
            WinButton uICloseButton = this.UIUnabletoconnectthesyWindow.UIUnabletoconnectthesyTitleBar.UICloseButton;
            WinText uITheRPCserverisunavaiText = this.UIUnabletoconnectthesyWindow.UIUnabletoconnectthesyDialog.UITheRPCserverisunavaiText;
            WinButton uIOKButton = this.UIUnabletoconnectthesyWindow.UIUnabletoconnectthesyDialog.UIOKButton;
            WinEdit uIIpAddressComboBoxEdiEdit1 = this.UIAddHostWindow.UIPanelControl1Pane.UIIpAddressComboBoxEdiEdit1;
            WinEdit uIItem1___Edit = this.UIAddHostWindow.UIPanelControl1Pane.UIItem1___Edit;
            WinTitleBar uIValidationerrorTitleBar = this.UIValidationerrorWindow.UIValidationerrorTitleBar;
            WinText uIPleaseinputhostsysteText1 = this.UIValidationerrorWindow.UIValidationerrorDialog.UIPleaseinputhostsysteText1;
            WinButton uIOKButton1 = this.UIValidationerrorWindow.UIValidationerrorDialog.UIOKButton;
            WinButton uICancelButton = this.UIAddHostWindow.UIAddHostClient.UICancelButton;
            #endregion

            // Click 'Add Host System' button
            Mouse.Click(uIAddHostSystemButton, new Point(69, 14));

            // Click 'hostNameTextEdit' text box
            Mouse.Click(uIHostNameTextEditEdit, new Point(61, 7));

            // Type '1' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.addhostsystemParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'ipAddressComboBoxEdit' text box
            Mouse.Click(uIIpAddressComboBoxEdiEdit, new Point(64, 10));

            // Type '1' in '0.0.0.1' text box
            Keyboard.SendKeys(uIItem0001Edit, this.addhostsystemParams.UIItem0001EditSendKeys, ModifierKeys.None);

            // Click 'Current Credentials' radio button
            Mouse.Click(uICurrentCredentialsRadioButton, new Point(14, 9));

            // Select 'Specify Credentials' radio button
            uISpecifyCredentialsRadioButton.Selected = this.addhostsystemParams.UISpecifyCredentialsRadioButtonSelected;

            // Select 'Current Credentials' radio button
            uICurrentCredentialsRadioButton.Selected = this.addhostsystemParams.UICurrentCredentialsRadioButtonSelected;

            // Select 'Specify Credentials' radio button
            uISpecifyCredentialsRadioButton.Selected = this.addhostsystemParams.UISpecifyCredentialsRadioButtonSelected1;

            // Click 'userNameTextEdit' text box
            Mouse.Click(uIUserNameTextEditEdit, new Point(77, 1));

            // Type '1' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit1, this.addhostsystemParams.UIItemEditSendKeys1, ModifierKeys.None);

            // Click 'passwordTextEdit' text box
            Mouse.Click(uIPasswordTextEditEdit, new Point(63, 15));

            // Type '********' in 'passwordTextEdit' text box
            Keyboard.SendKeys(uIPasswordTextEditEdit, this.addhostsystemParams.UIPasswordTextEditEditSendKeys, true);

            // Last mouse action was not recorded.

            // Click 'Test Connection' button
            Mouse.Click(uITestConnectionButton, new Point(92, 18));

            // Click 'Unable to connect the system' title bar
            Mouse.Click(uIUnabletoconnectthesyTitleBar, new Point(128, 6));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(13, 9));

            // Click 'Test Connection' button
            Mouse.Click(uITestConnectionButton, new Point(99, 14));

            // Click 'The RPC server is unavailable. (Exception from HRE...' label
            Mouse.Click(uITheRPCserverisunavaiText, new Point(23, 5));

            // Click 'The RPC server is unavailable. (Exception from HRE...' label
            Mouse.Click(uITheRPCserverisunavaiText, new Point(213, 6));

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(46, 7));

            // Click 'ipAddressComboBoxEdit' text box
            Mouse.Click(uIIpAddressComboBoxEdiEdit1, new Point(30, 9));

            // Type '{Back}{Back}{Back}{Back}{Back}{Back}' in '1. _._._' text box
            Keyboard.SendKeys(uIItem1___Edit, this.addhostsystemParams.UIItem1___EditSendKeys, ModifierKeys.None);

            // Click 'Test Connection' button
            Mouse.Click(uITestConnectionButton, new Point(80, 6));

            // Click 'Validation error' title bar
            Mouse.Click(uIValidationerrorTitleBar, new Point(78, 9));

            // Click 'Please input host system IP Address.' label
            Mouse.Click(uIPleaseinputhostsysteText1, new Point(66, 10));

            // Click '&OK' button
            Mouse.Click(uIOKButton1, new Point(60, 3));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(33, 12));
        }
        
        /// <summary>
        /// AsserInputHostIPAddress - Use 'AsserInputHostIPAddressExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AsserInputHostIPAddress()
        {
            #region Variable Declarations
            WinText uIPleaseinputhostsysteText1 = this.UIValidationerrorWindow.UIValidationerrorDialog.UIPleaseinputhostsysteText1;
            #endregion

            // Verify that 'Please input host system IP Address.' label's property 'Name' equals 'Please input host system IP Address.'
            Assert.AreEqual(this.AsserInputHostIPAddressExpectedValues.UIPleaseinputhostsysteText1Name, uIPleaseinputhostsysteText1.Name);

            // Verify that 'Please input host system IP Address.' label's property 'DisplayText' equals 'Validation error'
            Assert.AreEqual(this.AsserInputHostIPAddressExpectedValues.UIPleaseinputhostsysteText1DisplayText, uIPleaseinputhostsysteText1.DisplayText);
        }
        
        /// <summary>
        /// AssertHostPresent - Use 'AssertHostPresentExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertHostPresent()
        {
            #region Variable Declarations
            WinText uIThesystemisalreadyprText = this.UIAddHostWindow.UIAddHostClient.UIThesystemisalreadyprText;
            #endregion

            // Verify that 'The system is already present.' label's property 'DisplayText' equals 'The system is already present.'
            Assert.AreEqual(this.AssertHostPresentExpectedValues.UIThesystemisalreadyprTextDisplayText, uIThesystemisalreadyprText.DisplayText);
        }
        
        /// <summary>
        /// AssertInputHostName - Use 'AssertInputHostNameExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertInputHostName()
        {
            #region Variable Declarations
            WinText uIPleaseinputhostsysteText2 = this.UIValidationerrorWindow.UIValidationerrorDialog.UIPleaseinputhostsysteText2;
            #endregion

            // Verify that 'Please input host system name.' label's property 'Name' equals 'Please input host system name.'
            Assert.AreEqual(this.AssertInputHostNameExpectedValues.UIPleaseinputhostsysteText2Name, uIPleaseinputhostsysteText2.Name);

            // Verify that 'Please input host system name.' label's property 'DisplayText' equals 'Validation error'
            Assert.AreEqual(this.AssertInputHostNameExpectedValues.UIPleaseinputhostsysteText2DisplayText, uIPleaseinputhostsysteText2.DisplayText);
        }
        
        /// <summary>
        /// AssertInputHostNameAndIPAddress - Use 'AssertInputHostNameAndIPAddressExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertInputHostNameAndIPAddress()
        {
            #region Variable Declarations
            WinTitleBar uIValidationerrorTitleBar = this.UIValidationerrorWindow.UIValidationerrorTitleBar;
            WinText uIPleaseinputhostsysteText = this.UIValidationerrorWindow.UIValidationerrorDialog.UIPleaseinputhostsysteText;
            #endregion

            // Verify that 'Validation error' title bar's property 'DisplayText' equals 'Validation error'
            Assert.AreEqual(this.AssertInputHostNameAndIPAddressExpectedValues.UIValidationerrorTitleBarDisplayText, uIValidationerrorTitleBar.DisplayText);

            // Verify that 'Please input host system name.Please input host sy...' label's property 'DisplayText' equals 'Validation error'
            Assert.AreEqual(this.AssertInputHostNameAndIPAddressExpectedValues.UIPleaseinputhostsysteTextDisplayText, uIPleaseinputhostsysteText.DisplayText);

            // Verify that 'Please input host system name.Please input host sy...' label's property 'Name' equals 'Please input host system name.Please input host system IP Address.'
            Assert.AreEqual(this.AssertInputHostNameAndIPAddressExpectedValues.UIPleaseinputhostsysteTextName, uIPleaseinputhostsysteText.Name);
        }
        
        /// <summary>
        /// AssertInputPSWD - Use 'AssertInputPSWDExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertInputPSWD()
        {
            #region Variable Declarations
            WinText uIPleaseinputpasswordText = this.UIValidationerrorWindow.UIValidationerrorDialog.UIPleaseinputpasswordText;
            #endregion

            // Verify that 'Please input password.' label's property 'Name' equals 'Please input password.'
            Assert.AreEqual(this.AssertInputPSWDExpectedValues.UIPleaseinputpasswordTextName, uIPleaseinputpasswordText.Name);
        }
        
        /// <summary>
        /// AssertInputUserName - Use 'AssertInputUserNameExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertInputUserName()
        {
            #region Variable Declarations
            WinText uIPleaseinputusernameText = this.UIValidationerrorWindow.UIValidationerrorDialog.UIPleaseinputusernameText;
            #endregion

            // Verify that 'Please input user name.' label's property 'Name' equals 'Please input user name.'
            Assert.AreEqual(this.AssertInputUserNameExpectedValues.UIPleaseinputusernameTextName, uIPleaseinputusernameText.Name);
        }
        
        /// <summary>
        /// AssertInputUsernameAndPswd - Use 'AssertInputUsernameAndPswdExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertInputUsernameAndPswd()
        {
            #region Variable Declarations
            WinText uIPleaseinputusernamePText = this.UIValidationerrorWindow.UIValidationerrorDialog.UIPleaseinputusernamePText;
            #endregion

            // Verify that 'Please input user name.Please input password.' label's property 'Name' equals 'Please input user name.Please input password.'
            Assert.AreEqual(this.AssertInputUsernameAndPswdExpectedValues.UIPleaseinputusernamePTextName, uIPleaseinputusernamePText.Name);
        }
        
        /// <summary>
        /// AssertTestConnectionFail - Use 'AssertTestConnectionFailExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTestConnectionFail()
        {
            #region Variable Declarations
            WinText uITheRPCserverisunavaiText = this.UIUnabletoconnectthesyWindow.UIUnabletoconnectthesyDialog.UITheRPCserverisunavaiText;
            #endregion

            // Verify that 'The RPC server is unavailable. (Exception from HRE...' label's property 'Name' equals 'The RPC server is unavailable. (Exception from HRESULT: 0x800706BA)'
            Assert.AreEqual(this.AssertTestConnectionFailExpectedValues.UITheRPCserverisunavaiTextName, uITheRPCserverisunavaiText.Name);

            // Verify that 'The RPC server is unavailable. (Exception from HRE...' label's property 'DisplayText' equals 'Unable to connect the system'
            Assert.AreEqual(this.AssertTestConnectionFailExpectedValues.UITheRPCserverisunavaiTextDisplayText, uITheRPCserverisunavaiText.DisplayText);
        }
        
        /// <summary>
        /// AssertTestConnectionSucceed - Use 'AssertTestConnectionSucceedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTestConnectionSucceed()
        {
            #region Variable Declarations
            WinText uITestconnectionsucceeText = this.UITestConnectionWindow.UITestConnectionDialog.UITestconnectionsucceeText;
            #endregion

            // Verify that 'Test connection succeeded.' label's property 'Name' equals 'Test connection succeeded.'
            Assert.AreEqual(this.AssertTestConnectionSucceedExpectedValues.UITestconnectionsucceeTextName, uITestconnectionsucceeText.Name);

            // Verify that 'Test connection succeeded.' label's property 'DisplayText' equals 'Test Connection'
            Assert.AreEqual(this.AssertTestConnectionSucceedExpectedValues.UITestconnectionsucceeTextDisplayText, uITestconnectionsucceeText.DisplayText);
        }
        
        /// <summary>
        /// AssertUserCredentialFail - Use 'AssertUserCredentialFailExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertUserCredentialFail()
        {
            #region Variable Declarations
            WinText uIUsercredentialscannoText = this.UIUnabletoconnectthesyWindow.UIUnabletoconnectthesyDialog.UIUsercredentialscannoText;
            #endregion

            // Verify that 'User credentials cannot be used for local connecti...' label's property 'Name' equals 'User credentials cannot be used for local connections '
            Assert.AreEqual(this.AssertUserCredentialFailExpectedValues.UIUsercredentialscannoTextName, uIUsercredentialscannoText.Name);
        }
        
        /// <summary>
        /// ClickCancelButton
        /// </summary>
        public void ClickCancelButton()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UIAddHostWindow.UIAddHostClient.UICancelButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(65, 15));
        }
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinEdit uIHostNameTextEditEdit1 = this.UIAddHostWindow.UIPanelControl1Pane.UIHostNameTextEditEdit1;
            WinEdit uIHostNameTextEditEdit2 = this.UIAddHostWindow.UIPanelControl1Pane.UIHostNameTextEditEdit2;
            WinText uIHostNameText = this.UIAddHostWindow.UIPanelControl1Pane.UIHostNameText;
            WinEdit uIIpAddressComboBoxEdiEdit2 = this.UIAddHostWindow.UIPanelControl1Pane.UIIpAddressComboBoxEdiEdit2;
            WinEdit uIIpAddressComboBoxEdiEdit3 = this.UIAddHostWindow.UIPanelControl1Pane.UIIpAddressComboBoxEdiEdit3;
            WinText uIIPAddressText = this.UIAddHostWindow.UIPanelControl1Pane.UIIPAddressText;
            WinEdit uIHostNameTextEditEdit3 = this.UIAddHostWindow.UIPanelControl1Pane.UIHostNameTextEditEdit3;
            WinEdit uIHostNameTextEditEdit4 = this.UIAddHostWindow.UIPanelControl1Pane.UIHostNameTextEditEdit4;
            WinPane uIPanelControl1Pane = this.UIAddHostWindow.UIAddHostClient.UIPanelControl1Pane;
            WinEdit uILAMANNASRVVM3sr5domeEdit = this.UIAddHostWindow.UIPanelControl1Pane.UILAMANNASRVVM3sr5domeEdit;
            #endregion

            // Click 'hostNameTextEdit' text box
            Mouse.Click(uIHostNameTextEditEdit1, new Point(245, 6));

            // Move 'hostNameTextEdit' text box from (243, 8) to 'Host Name:' label (32, 3)
            uIHostNameText.EnsureClickable(new Point(32, 3));
            Mouse.StartDragging(uIHostNameTextEditEdit2, new Point(243, 8));
            Mouse.StopDragging(uIHostNameText, new Point(32, 3));

            // Click 'ipAddressComboBoxEdit' text box
            Mouse.Click(uIIpAddressComboBoxEdiEdit2, new Point(128, 6));

            // Move 'ipAddressComboBoxEdit' text box from (126, 9) to 'IP Address:' label (42, 7)
            uIIPAddressText.EnsureClickable(new Point(42, 7));
            Mouse.StartDragging(uIIpAddressComboBoxEdiEdit3, new Point(126, 9));
            Mouse.StopDragging(uIIPAddressText, new Point(42, 7));

            // Click 'hostNameTextEdit' text box
            Mouse.Click(uIHostNameTextEditEdit3, new Point(241, 10));

            // Move 'hostNameTextEdit' text box from (242, 10) to 'panelControl1' pane (87, 20)
            uIPanelControl1Pane.EnsureClickable(new Point(87, 20));
            Mouse.StartDragging(uIHostNameTextEditEdit4, new Point(242, 10));
            Mouse.StopDragging(uIPanelControl1Pane, new Point(87, 20));

            // Type '{Back}' in 'LAMANNA-SRV-VM3.sr5dom.eng.emc.com' text box
            Keyboard.SendKeys(uILAMANNASRVVM3sr5domeEdit, this.RecordedMethod1Params.UILAMANNASRVVM3sr5domeEditSendKeys, ModifierKeys.None);
        }
        
        #region Properties
        public virtual addhostsystemParams addhostsystemParams
        {
            get
            {
                if ((this.maddhostsystemParams == null))
                {
                    this.maddhostsystemParams = new addhostsystemParams();
                }
                return this.maddhostsystemParams;
            }
        }
        
        public virtual AsserInputHostIPAddressExpectedValues AsserInputHostIPAddressExpectedValues
        {
            get
            {
                if ((this.mAsserInputHostIPAddressExpectedValues == null))
                {
                    this.mAsserInputHostIPAddressExpectedValues = new AsserInputHostIPAddressExpectedValues();
                }
                return this.mAsserInputHostIPAddressExpectedValues;
            }
        }
        
        public virtual AssertHostPresentExpectedValues AssertHostPresentExpectedValues
        {
            get
            {
                if ((this.mAssertHostPresentExpectedValues == null))
                {
                    this.mAssertHostPresentExpectedValues = new AssertHostPresentExpectedValues();
                }
                return this.mAssertHostPresentExpectedValues;
            }
        }
        
        public virtual AssertInputHostNameExpectedValues AssertInputHostNameExpectedValues
        {
            get
            {
                if ((this.mAssertInputHostNameExpectedValues == null))
                {
                    this.mAssertInputHostNameExpectedValues = new AssertInputHostNameExpectedValues();
                }
                return this.mAssertInputHostNameExpectedValues;
            }
        }
        
        public virtual AssertInputHostNameAndIPAddressExpectedValues AssertInputHostNameAndIPAddressExpectedValues
        {
            get
            {
                if ((this.mAssertInputHostNameAndIPAddressExpectedValues == null))
                {
                    this.mAssertInputHostNameAndIPAddressExpectedValues = new AssertInputHostNameAndIPAddressExpectedValues();
                }
                return this.mAssertInputHostNameAndIPAddressExpectedValues;
            }
        }
        
        public virtual AssertInputPSWDExpectedValues AssertInputPSWDExpectedValues
        {
            get
            {
                if ((this.mAssertInputPSWDExpectedValues == null))
                {
                    this.mAssertInputPSWDExpectedValues = new AssertInputPSWDExpectedValues();
                }
                return this.mAssertInputPSWDExpectedValues;
            }
        }
        
        public virtual AssertInputUserNameExpectedValues AssertInputUserNameExpectedValues
        {
            get
            {
                if ((this.mAssertInputUserNameExpectedValues == null))
                {
                    this.mAssertInputUserNameExpectedValues = new AssertInputUserNameExpectedValues();
                }
                return this.mAssertInputUserNameExpectedValues;
            }
        }
        
        public virtual AssertInputUsernameAndPswdExpectedValues AssertInputUsernameAndPswdExpectedValues
        {
            get
            {
                if ((this.mAssertInputUsernameAndPswdExpectedValues == null))
                {
                    this.mAssertInputUsernameAndPswdExpectedValues = new AssertInputUsernameAndPswdExpectedValues();
                }
                return this.mAssertInputUsernameAndPswdExpectedValues;
            }
        }
        
        public virtual AssertTestConnectionFailExpectedValues AssertTestConnectionFailExpectedValues
        {
            get
            {
                if ((this.mAssertTestConnectionFailExpectedValues == null))
                {
                    this.mAssertTestConnectionFailExpectedValues = new AssertTestConnectionFailExpectedValues();
                }
                return this.mAssertTestConnectionFailExpectedValues;
            }
        }
        
        public virtual AssertTestConnectionSucceedExpectedValues AssertTestConnectionSucceedExpectedValues
        {
            get
            {
                if ((this.mAssertTestConnectionSucceedExpectedValues == null))
                {
                    this.mAssertTestConnectionSucceedExpectedValues = new AssertTestConnectionSucceedExpectedValues();
                }
                return this.mAssertTestConnectionSucceedExpectedValues;
            }
        }
        
        public virtual AssertUserCredentialFailExpectedValues AssertUserCredentialFailExpectedValues
        {
            get
            {
                if ((this.mAssertUserCredentialFailExpectedValues == null))
                {
                    this.mAssertUserCredentialFailExpectedValues = new AssertUserCredentialFailExpectedValues();
                }
                return this.mAssertUserCredentialFailExpectedValues;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public UIAddHostWindow UIAddHostWindow
        {
            get
            {
                if ((this.mUIAddHostWindow == null))
                {
                    this.mUIAddHostWindow = new UIAddHostWindow();
                }
                return this.mUIAddHostWindow;
            }
        }
        
        public UITestConnectionWindow1 UITestConnectionWindow
        {
            get
            {
                if ((this.mUITestConnectionWindow == null))
                {
                    this.mUITestConnectionWindow = new UITestConnectionWindow1();
                }
                return this.mUITestConnectionWindow;
            }
        }
        
        public UIValidationerrorWindow UIValidationerrorWindow
        {
            get
            {
                if ((this.mUIValidationerrorWindow == null))
                {
                    this.mUIValidationerrorWindow = new UIValidationerrorWindow();
                }
                return this.mUIValidationerrorWindow;
            }
        }
        
        public UIEMCStorageIntegratorWindow UIEMCStorageIntegratorWindow
        {
            get
            {
                if ((this.mUIEMCStorageIntegratorWindow == null))
                {
                    this.mUIEMCStorageIntegratorWindow = new UIEMCStorageIntegratorWindow();
                }
                return this.mUIEMCStorageIntegratorWindow;
            }
        }
        
        public UIUnabletoconnectthesyWindow UIUnabletoconnectthesyWindow
        {
            get
            {
                if ((this.mUIUnabletoconnectthesyWindow == null))
                {
                    this.mUIUnabletoconnectthesyWindow = new UIUnabletoconnectthesyWindow();
                }
                return this.mUIUnabletoconnectthesyWindow;
            }
        }
        #endregion
        
        #region Fields
        private addhostsystemParams maddhostsystemParams;
        
        private AsserInputHostIPAddressExpectedValues mAsserInputHostIPAddressExpectedValues;
        
        private AssertHostPresentExpectedValues mAssertHostPresentExpectedValues;
        
        private AssertInputHostNameExpectedValues mAssertInputHostNameExpectedValues;
        
        private AssertInputHostNameAndIPAddressExpectedValues mAssertInputHostNameAndIPAddressExpectedValues;
        
        private AssertInputPSWDExpectedValues mAssertInputPSWDExpectedValues;
        
        private AssertInputUserNameExpectedValues mAssertInputUserNameExpectedValues;
        
        private AssertInputUsernameAndPswdExpectedValues mAssertInputUsernameAndPswdExpectedValues;
        
        private AssertTestConnectionFailExpectedValues mAssertTestConnectionFailExpectedValues;
        
        private AssertTestConnectionSucceedExpectedValues mAssertTestConnectionSucceedExpectedValues;
        
        private AssertUserCredentialFailExpectedValues mAssertUserCredentialFailExpectedValues;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private UIAddHostWindow mUIAddHostWindow;
        
        private UITestConnectionWindow1 mUITestConnectionWindow;
        
        private UIValidationerrorWindow mUIValidationerrorWindow;
        
        private UIEMCStorageIntegratorWindow mUIEMCStorageIntegratorWindow;
        
        private UIUnabletoconnectthesyWindow mUIUnabletoconnectthesyWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'addhostsystem'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class addhostsystemParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "1";
        
        /// <summary>
        /// Type '1' in '0.0.0.1' text box
        /// </summary>
        public string UIItem0001EditSendKeys = "1";
        
        /// <summary>
        /// Select 'Specify Credentials' radio button
        /// </summary>
        public bool UISpecifyCredentialsRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'Current Credentials' radio button
        /// </summary>
        public bool UICurrentCredentialsRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'Specify Credentials' radio button
        /// </summary>
        public bool UISpecifyCredentialsRadioButtonSelected1 = true;
        
        /// <summary>
        /// Type '1' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys1 = "1";
        
        /// <summary>
        /// Type '********' in 'passwordTextEdit' text box
        /// </summary>
        public string UIPasswordTextEditEditSendKeys = "2Oxm3dAuzpTO5Npam0fkew==";
        
        /// <summary>
        /// Type '{Back}{Back}{Back}{Back}{Back}{Back}' in '1. _._._' text box
        /// </summary>
        public string UIItem1___EditSendKeys = "{Back}{Back}{Back}{Back}{Back}{Back}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AsserInputHostIPAddress'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AsserInputHostIPAddressExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Please input host system IP Address.' label's property 'Name' equals 'Please input host system IP Address.'
        /// </summary>
        public string UIPleaseinputhostsysteText1Name = "Please input host system IP Address.";
        
        /// <summary>
        /// Verify that 'Please input host system IP Address.' label's property 'DisplayText' equals 'Validation error'
        /// </summary>
        public string UIPleaseinputhostsysteText1DisplayText = "Validation error";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertHostPresent'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertHostPresentExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'The system is already present.' label's property 'DisplayText' equals 'The system is already present.'
        /// </summary>
        public string UIThesystemisalreadyprTextDisplayText = "The system is already present.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertInputHostName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertInputHostNameExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Please input host system name.' label's property 'Name' equals 'Please input host system name.'
        /// </summary>
        public string UIPleaseinputhostsysteText2Name = "Please input host system name.";
        
        /// <summary>
        /// Verify that 'Please input host system name.' label's property 'DisplayText' equals 'Validation error'
        /// </summary>
        public string UIPleaseinputhostsysteText2DisplayText = "Validation error";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertInputHostNameAndIPAddress'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertInputHostNameAndIPAddressExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Validation error' title bar's property 'DisplayText' equals 'Validation error'
        /// </summary>
        public string UIValidationerrorTitleBarDisplayText = "Validation error";
        
        /// <summary>
        /// Verify that 'Please input host system name.Please input host sy...' label's property 'DisplayText' equals 'Validation error'
        /// </summary>
        public string UIPleaseinputhostsysteTextDisplayText = "Validation error";
        
        /// <summary>
        /// Verify that 'Please input host system name.Please input host sy...' label's property 'Name' equals 'Please input host system name.Please input host system IP Address.'
        /// </summary>
        public string UIPleaseinputhostsysteTextName = "Please input host system name.Please input host system IP Address.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertInputPSWD'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertInputPSWDExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Please input password.' label's property 'Name' equals 'Please input password.'
        /// </summary>
        public string UIPleaseinputpasswordTextName = "Please input password.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertInputUserName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertInputUserNameExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Please input user name.' label's property 'Name' equals 'Please input user name.'
        /// </summary>
        public string UIPleaseinputusernameTextName = "Please input user name.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertInputUsernameAndPswd'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertInputUsernameAndPswdExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Please input user name.Please input password.' label's property 'Name' equals 'Please input user name.Please input password.'
        /// </summary>
        public string UIPleaseinputusernamePTextName = "Please input user name.Please input password.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTestConnectionFail'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertTestConnectionFailExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'The RPC server is unavailable. (Exception from HRE...' label's property 'Name' equals 'The RPC server is unavailable. (Exception from HRESULT: 0x800706BA)'
        /// </summary>
        public string UITheRPCserverisunavaiTextName = "The RPC server is unavailable. (Exception from HRESULT: 0x800706BA)";
        
        /// <summary>
        /// Verify that 'The RPC server is unavailable. (Exception from HRE...' label's property 'DisplayText' equals 'Unable to connect the system'
        /// </summary>
        public string UITheRPCserverisunavaiTextDisplayText = "Unable to connect the system";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTestConnectionSucceed'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertTestConnectionSucceedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Test connection succeeded.' label's property 'Name' equals 'Test connection succeeded.'
        /// </summary>
        public string UITestconnectionsucceeTextName = "Test connection succeeded.";
        
        /// <summary>
        /// Verify that 'Test connection succeeded.' label's property 'DisplayText' equals 'Test Connection'
        /// </summary>
        public string UITestconnectionsucceeTextDisplayText = "Test Connection";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertUserCredentialFail'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertUserCredentialFailExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'User credentials cannot be used for local connecti...' label's property 'Name' equals 'User credentials cannot be used for local connections '
        /// </summary>
        public string UIUsercredentialscannoTextName = "User credentials cannot be used for local connections ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{Back}' in 'LAMANNA-SRV-VM3.sr5dom.eng.emc.com' text box
        /// </summary>
        public string UILAMANNASRVVM3sr5domeEditSendKeys = "{Back}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAddHostWindow : WinWindow
    {
        
        public UIAddHostWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Add Host";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Add Host");
            #endregion
        }
        
        #region Properties
        public UIPanelControl1Pane UIPanelControl1Pane
        {
            get
            {
                if ((this.mUIPanelControl1Pane == null))
                {
                    this.mUIPanelControl1Pane = new UIPanelControl1Pane(this);
                }
                return this.mUIPanelControl1Pane;
            }
        }
        
        public UIIpAddressComboBoxEdiClient UIIpAddressComboBoxEdiClient
        {
            get
            {
                if ((this.mUIIpAddressComboBoxEdiClient == null))
                {
                    this.mUIIpAddressComboBoxEdiClient = new UIIpAddressComboBoxEdiClient(this);
                }
                return this.mUIIpAddressComboBoxEdiClient;
            }
        }
        
        public UIGroupBox1Window UIGroupBox1Window
        {
            get
            {
                if ((this.mUIGroupBox1Window == null))
                {
                    this.mUIGroupBox1Window = new UIGroupBox1Window(this);
                }
                return this.mUIGroupBox1Window;
            }
        }
        
        public UISR5DOMadministratorClient UISR5DOMadministratorClient
        {
            get
            {
                if ((this.mUISR5DOMadministratorClient == null))
                {
                    this.mUISR5DOMadministratorClient = new UISR5DOMadministratorClient(this);
                }
                return this.mUISR5DOMadministratorClient;
            }
        }
        
        public UIPasswordTextEditClient UIPasswordTextEditClient
        {
            get
            {
                if ((this.mUIPasswordTextEditClient == null))
                {
                    this.mUIPasswordTextEditClient = new UIPasswordTextEditClient(this);
                }
                return this.mUIPasswordTextEditClient;
            }
        }
        
        public UITestConnectionWindow UITestConnectionWindow
        {
            get
            {
                if ((this.mUITestConnectionWindow == null))
                {
                    this.mUITestConnectionWindow = new UITestConnectionWindow(this);
                }
                return this.mUITestConnectionWindow;
            }
        }
        
        public UIAddHostClient UIAddHostClient
        {
            get
            {
                if ((this.mUIAddHostClient == null))
                {
                    this.mUIAddHostClient = new UIAddHostClient(this);
                }
                return this.mUIAddHostClient;
            }
        }
        
        public UIAddHostTitleBar UIAddHostTitleBar
        {
            get
            {
                if ((this.mUIAddHostTitleBar == null))
                {
                    this.mUIAddHostTitleBar = new UIAddHostTitleBar(this);
                }
                return this.mUIAddHostTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelControl1Pane mUIPanelControl1Pane;
        
        private UIIpAddressComboBoxEdiClient mUIIpAddressComboBoxEdiClient;
        
        private UIGroupBox1Window mUIGroupBox1Window;
        
        private UISR5DOMadministratorClient mUISR5DOMadministratorClient;
        
        private UIPasswordTextEditClient mUIPasswordTextEditClient;
        
        private UITestConnectionWindow mUITestConnectionWindow;
        
        private UIAddHostClient mUIAddHostClient;
        
        private UIAddHostTitleBar mUIAddHostTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPanelControl1Pane : WinPane
    {
        
        public UIPanelControl1Pane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "panelControl1";
            this.WindowTitles.Add("Add Host");
            #endregion
        }
        
        #region Properties
        public WinText UIHostNameText
        {
            get
            {
                if ((this.mUIHostNameText == null))
                {
                    this.mUIHostNameText = new WinText(this);
                    #region Search Criteria
                    this.mUIHostNameText.SearchProperties[WinText.PropertyNames.Name] = "Host Name:";
                    this.mUIHostNameText.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIHostNameText;
            }
        }
        
        public WinEdit UIHostNameTextEditEdit
        {
            get
            {
                if ((this.mUIHostNameTextEditEdit == null))
                {
                    this.mUIHostNameTextEditEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIHostNameTextEditEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIHostNameTextEditEdit.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
                    this.mUIHostNameTextEditEdit.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIHostNameTextEditEdit;
            }
        }
        
        public WinText UIIPAddressText
        {
            get
            {
                if ((this.mUIIPAddressText == null))
                {
                    this.mUIIPAddressText = new WinText(this);
                    #region Search Criteria
                    this.mUIIPAddressText.SearchProperties[WinText.PropertyNames.Name] = "IP Address:";
                    this.mUIIPAddressText.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIIPAddressText;
            }
        }
        
        public WinClient UIIpAddressComboBoxEdiClient
        {
            get
            {
                if ((this.mUIIpAddressComboBoxEdiClient == null))
                {
                    this.mUIIpAddressComboBoxEdiClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIIpAddressComboBoxEdiClient.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIIpAddressComboBoxEdiClient;
            }
        }
        
        public WinText UIAuthenticationText
        {
            get
            {
                if ((this.mUIAuthenticationText == null))
                {
                    this.mUIAuthenticationText = new WinText(this);
                    #region Search Criteria
                    this.mUIAuthenticationText.SearchProperties[WinText.PropertyNames.Name] = "Authentication:";
                    this.mUIAuthenticationText.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIAuthenticationText;
            }
        }
        
        public WinRadioButton UICurrentCredentialsRadioButton
        {
            get
            {
                if ((this.mUICurrentCredentialsRadioButton == null))
                {
                    this.mUICurrentCredentialsRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUICurrentCredentialsRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Current Credentials";
                    this.mUICurrentCredentialsRadioButton.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUICurrentCredentialsRadioButton;
            }
        }
        
        public WinRadioButton UISpecifyCredentialsRadioButton
        {
            get
            {
                if ((this.mUISpecifyCredentialsRadioButton == null))
                {
                    this.mUISpecifyCredentialsRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUISpecifyCredentialsRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Specify Credentials";
                    this.mUISpecifyCredentialsRadioButton.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUISpecifyCredentialsRadioButton;
            }
        }
        
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        
        public WinEdit UIIpAddressComboBoxEdiEdit
        {
            get
            {
                if ((this.mUIIpAddressComboBoxEdiEdit == null))
                {
                    this.mUIIpAddressComboBoxEdiEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIIpAddressComboBoxEdiEdit.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIIpAddressComboBoxEdiEdit;
            }
        }
        
        public WinEdit UIItem0001Edit
        {
            get
            {
                if ((this.mUIItem0001Edit == null))
                {
                    this.mUIItem0001Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItem0001Edit.SearchProperties[WinEdit.PropertyNames.Name] = "0.0.0.1";
                    this.mUIItem0001Edit.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIItem0001Edit;
            }
        }
        
        public WinEdit UIIpAddressComboBoxEdiEdit1
        {
            get
            {
                if ((this.mUIIpAddressComboBoxEdiEdit1 == null))
                {
                    this.mUIIpAddressComboBoxEdiEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIIpAddressComboBoxEdiEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "1.";
                    this.mUIIpAddressComboBoxEdiEdit1.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIIpAddressComboBoxEdiEdit1;
            }
        }
        
        public WinEdit UIItem1___Edit
        {
            get
            {
                if ((this.mUIItem1___Edit == null))
                {
                    this.mUIItem1___Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItem1___Edit.SearchProperties[WinEdit.PropertyNames.Name] = "1. _._._";
                    this.mUIItem1___Edit.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIItem1___Edit;
            }
        }
        
        public WinWindow UIHostNameTextEditWindow
        {
            get
            {
                if ((this.mUIHostNameTextEditWindow == null))
                {
                    this.mUIHostNameTextEditWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIHostNameTextEditWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
                    this.mUIHostNameTextEditWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "9";
                    this.mUIHostNameTextEditWindow.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIHostNameTextEditWindow;
            }
        }
        
        public WinClient UIHostNameTextEditClient
        {
            get
            {
                if ((this.mUIHostNameTextEditClient == null))
                {
                    this.mUIHostNameTextEditClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIHostNameTextEditClient.SearchProperties[WinControl.PropertyNames.Instance] = "2";
                    this.mUIHostNameTextEditClient.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIHostNameTextEditClient;
            }
        }
        
        public WinEdit UIHostNameTextEditEdit1
        {
            get
            {
                if ((this.mUIHostNameTextEditEdit1 == null))
                {
                    this.mUIHostNameTextEditEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIHostNameTextEditEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "LAMANNA-SRV-VM3.sr5dom.eng.emc.com";
                    this.mUIHostNameTextEditEdit1.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIHostNameTextEditEdit1;
            }
        }
        
        public WinEdit UIHostNameTextEditEdit2
        {
            get
            {
                if ((this.mUIHostNameTextEditEdit2 == null))
                {
                    this.mUIHostNameTextEditEdit2 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIHostNameTextEditEdit2.SearchProperties[WinEdit.PropertyNames.Name] = "LAMANNA-SRV-VM3.sr5dom.eng.emc.com";
                    this.mUIHostNameTextEditEdit2.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIHostNameTextEditEdit2;
            }
        }
        
        public WinEdit UIIpAddressComboBoxEdiEdit2
        {
            get
            {
                if ((this.mUIIpAddressComboBoxEdiEdit2 == null))
                {
                    this.mUIIpAddressComboBoxEdiEdit2 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIIpAddressComboBoxEdiEdit2.SearchProperties[WinEdit.PropertyNames.Name] = "10.5.222.54";
                    this.mUIIpAddressComboBoxEdiEdit2.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIIpAddressComboBoxEdiEdit2;
            }
        }
        
        public WinEdit UIIpAddressComboBoxEdiEdit3
        {
            get
            {
                if ((this.mUIIpAddressComboBoxEdiEdit3 == null))
                {
                    this.mUIIpAddressComboBoxEdiEdit3 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIIpAddressComboBoxEdiEdit3.SearchProperties[WinEdit.PropertyNames.Name] = "10.5.222.54";
                    this.mUIIpAddressComboBoxEdiEdit3.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIIpAddressComboBoxEdiEdit3;
            }
        }
        
        public WinEdit UIHostNameTextEditEdit3
        {
            get
            {
                if ((this.mUIHostNameTextEditEdit3 == null))
                {
                    this.mUIHostNameTextEditEdit3 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIHostNameTextEditEdit3.SearchProperties[WinEdit.PropertyNames.Name] = "LAMANNA-SRV-VM3.sr5dom.eng.emc.com";
                    this.mUIHostNameTextEditEdit3.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIHostNameTextEditEdit3;
            }
        }
        
        public WinEdit UIHostNameTextEditEdit4
        {
            get
            {
                if ((this.mUIHostNameTextEditEdit4 == null))
                {
                    this.mUIHostNameTextEditEdit4 = new WinEdit(this);
                    #region Search Criteria
                    this.mUIHostNameTextEditEdit4.SearchProperties[WinEdit.PropertyNames.Name] = "LAMANNA-SRV-VM3.sr5dom.eng.emc.com";
                    this.mUIHostNameTextEditEdit4.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIHostNameTextEditEdit4;
            }
        }
        
        public WinEdit UILAMANNASRVVM3sr5domeEdit
        {
            get
            {
                if ((this.mUILAMANNASRVVM3sr5domeEdit == null))
                {
                    this.mUILAMANNASRVVM3sr5domeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUILAMANNASRVVM3sr5domeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "LAMANNA-SRV-VM3.sr5dom.eng.emc.com";
                    this.mUILAMANNASRVVM3sr5domeEdit.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUILAMANNASRVVM3sr5domeEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIHostNameText;
        
        private WinEdit mUIHostNameTextEditEdit;
        
        private WinText mUIIPAddressText;
        
        private WinClient mUIIpAddressComboBoxEdiClient;
        
        private WinText mUIAuthenticationText;
        
        private WinRadioButton mUICurrentCredentialsRadioButton;
        
        private WinRadioButton mUISpecifyCredentialsRadioButton;
        
        private WinEdit mUIItemEdit;
        
        private WinEdit mUIIpAddressComboBoxEdiEdit;
        
        private WinEdit mUIItem0001Edit;
        
        private WinEdit mUIIpAddressComboBoxEdiEdit1;
        
        private WinEdit mUIItem1___Edit;
        
        private WinWindow mUIHostNameTextEditWindow;
        
        private WinClient mUIHostNameTextEditClient;
        
        private WinEdit mUIHostNameTextEditEdit1;
        
        private WinEdit mUIHostNameTextEditEdit2;
        
        private WinEdit mUIIpAddressComboBoxEdiEdit2;
        
        private WinEdit mUIIpAddressComboBoxEdiEdit3;
        
        private WinEdit mUIHostNameTextEditEdit3;
        
        private WinEdit mUIHostNameTextEditEdit4;
        
        private WinEdit mUILAMANNASRVVM3sr5domeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIIpAddressComboBoxEdiClient : WinClient
    {
        
        public UIIpAddressComboBoxEdiClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Add Host");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIGroupBox1Window : WinWindow
    {
        
        public UIGroupBox1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "groupBox1";
            this.WindowTitles.Add("Add Host");
            #endregion
        }
        
        #region Properties
        public WinText UIUserNameText
        {
            get
            {
                if ((this.mUIUserNameText == null))
                {
                    this.mUIUserNameText = new WinText(this);
                    #region Search Criteria
                    this.mUIUserNameText.SearchProperties[WinText.PropertyNames.Name] = "User Name:";
                    this.mUIUserNameText.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIUserNameText;
            }
        }
        
        public WinText UIPasswordText
        {
            get
            {
                if ((this.mUIPasswordText == null))
                {
                    this.mUIPasswordText = new WinText(this);
                    #region Search Criteria
                    this.mUIPasswordText.SearchProperties[WinText.PropertyNames.Name] = "Password:";
                    this.mUIPasswordText.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIPasswordText;
            }
        }
        
        public WinEdit UIUserNameTextEditEdit
        {
            get
            {
                if ((this.mUIUserNameTextEditEdit == null))
                {
                    this.mUIUserNameTextEditEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIUserNameTextEditEdit.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIUserNameTextEditEdit;
            }
        }
        
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        
        public WinEdit UIPasswordTextEditEdit
        {
            get
            {
                if ((this.mUIPasswordTextEditEdit == null))
                {
                    this.mUIPasswordTextEditEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIPasswordTextEditEdit.SearchProperties[WinEdit.PropertyNames.Name] = "PasswordTextEdit";
                    this.mUIPasswordTextEditEdit.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIPasswordTextEditEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIUserNameText;
        
        private WinText mUIPasswordText;
        
        private WinEdit mUIUserNameTextEditEdit;
        
        private WinEdit mUIItemEdit;
        
        private WinEdit mUIPasswordTextEditEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISR5DOMadministratorClient : WinClient
    {
        
        public UISR5DOMadministratorClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "SR5DOM\\administrator";
            this.WindowTitles.Add("Add Host");
            #endregion
        }
        
        #region Properties
        public WinEdit UIUserNameTextEditEdit
        {
            get
            {
                if ((this.mUIUserNameTextEditEdit == null))
                {
                    this.mUIUserNameTextEditEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIUserNameTextEditEdit.SearchProperties[WinEdit.PropertyNames.Name] = "SR5DOM\\administrator";
                    this.mUIUserNameTextEditEdit.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIUserNameTextEditEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIUserNameTextEditEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPasswordTextEditClient : WinClient
    {
        
        public UIPasswordTextEditClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "PasswordTextEdit";
            this.WindowTitles.Add("Add Host");
            #endregion
        }
        
        #region Properties
        public WinEdit UIPasswordTextEditEdit
        {
            get
            {
                if ((this.mUIPasswordTextEditEdit == null))
                {
                    this.mUIPasswordTextEditEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIPasswordTextEditEdit.SearchProperties[WinEdit.PropertyNames.Name] = "PasswordTextEdit";
                    this.mUIPasswordTextEditEdit.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIPasswordTextEditEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIPasswordTextEditEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITestConnectionWindow : WinWindow
    {
        
        public UITestConnectionWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "testConnectionButton";
            this.WindowTitles.Add("Add Host");
            #endregion
        }
        
        #region Properties
        public WinButton UITestConnectionButton
        {
            get
            {
                if ((this.mUITestConnectionButton == null))
                {
                    this.mUITestConnectionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUITestConnectionButton.SearchProperties[WinButton.PropertyNames.Name] = "Test Connection";
                    this.mUITestConnectionButton.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUITestConnectionButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUITestConnectionButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAddHostClient : WinClient
    {
        
        public UIAddHostClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Add Host";
            this.WindowTitles.Add("Add Host");
            #endregion
        }
        
        #region Properties
        public WinButton UIAddButton
        {
            get
            {
                if ((this.mUIAddButton == null))
                {
                    this.mUIAddButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddButton.SearchProperties[WinButton.PropertyNames.Name] = "Add";
                    this.mUIAddButton.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIAddButton;
            }
        }
        
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        
        public WinText UIThesystemisalreadyprText
        {
            get
            {
                if ((this.mUIThesystemisalreadyprText == null))
                {
                    this.mUIThesystemisalreadyprText = new WinText(this);
                    #region Search Criteria
                    this.mUIThesystemisalreadyprText.SearchProperties[WinText.PropertyNames.Name] = "The system is already present.";
                    this.mUIThesystemisalreadyprText.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIThesystemisalreadyprText;
            }
        }
        
        public WinPane UIPanelControl1Pane
        {
            get
            {
                if ((this.mUIPanelControl1Pane == null))
                {
                    this.mUIPanelControl1Pane = new WinPane(this);
                    #region Search Criteria
                    this.mUIPanelControl1Pane.SearchProperties[WinControl.PropertyNames.Name] = "panelControl1";
                    this.mUIPanelControl1Pane.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUIPanelControl1Pane;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddButton;
        
        private WinButton mUICancelButton;
        
        private WinText mUIThesystemisalreadyprText;
        
        private WinPane mUIPanelControl1Pane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAddHostTitleBar : WinTitleBar
    {
        
        public UIAddHostTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Add Host");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Add Host");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITestConnectionWindow1 : WinWindow
    {
        
        public UITestConnectionWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Test Connection";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Test Connection");
            #endregion
        }
        
        #region Properties
        public UITestConnectionDialog UITestConnectionDialog
        {
            get
            {
                if ((this.mUITestConnectionDialog == null))
                {
                    this.mUITestConnectionDialog = new UITestConnectionDialog(this);
                }
                return this.mUITestConnectionDialog;
            }
        }
        
        public UITestConnectionTitleBar UITestConnectionTitleBar
        {
            get
            {
                if ((this.mUITestConnectionTitleBar == null))
                {
                    this.mUITestConnectionTitleBar = new UITestConnectionTitleBar(this);
                }
                return this.mUITestConnectionTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UITestConnectionDialog mUITestConnectionDialog;
        
        private UITestConnectionTitleBar mUITestConnectionTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITestConnectionDialog : WinControl
    {
        
        public UITestConnectionDialog(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Test Connection";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
            this.WindowTitles.Add("Test Connection");
            #endregion
        }
        
        #region Properties
        public WinText UITestconnectionsucceeText
        {
            get
            {
                if ((this.mUITestconnectionsucceeText == null))
                {
                    this.mUITestconnectionsucceeText = new WinText(this);
                    #region Search Criteria
                    this.mUITestconnectionsucceeText.SearchProperties[WinText.PropertyNames.Name] = "Test connection succeeded.";
                    this.mUITestconnectionsucceeText.WindowTitles.Add("Test Connection");
                    #endregion
                }
                return this.mUITestconnectionsucceeText;
            }
        }
        
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "&OK";
                    this.mUIOKButton.WindowTitles.Add("Test Connection");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        
        public WinControl UITestConnectionImage
        {
            get
            {
                if ((this.mUITestConnectionImage == null))
                {
                    this.mUITestConnectionImage = new WinControl(this);
                    #region Search Criteria
                    this.mUITestConnectionImage.SearchProperties[UITestControl.PropertyNames.Name] = "Test Connection";
                    this.mUITestConnectionImage.SearchProperties[UITestControl.PropertyNames.ControlType] = "Image";
                    this.mUITestConnectionImage.WindowTitles.Add("Test Connection");
                    #endregion
                }
                return this.mUITestConnectionImage;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUITestconnectionsucceeText;
        
        private WinButton mUIOKButton;
        
        private WinControl mUITestConnectionImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITestConnectionTitleBar : WinTitleBar
    {
        
        public UITestConnectionTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Test Connection");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Test Connection");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIValidationerrorWindow : WinWindow
    {
        
        public UIValidationerrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Validation error";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Validation error");
            #endregion
        }
        
        #region Properties
        public UIValidationerrorDialog UIValidationerrorDialog
        {
            get
            {
                if ((this.mUIValidationerrorDialog == null))
                {
                    this.mUIValidationerrorDialog = new UIValidationerrorDialog(this);
                }
                return this.mUIValidationerrorDialog;
            }
        }
        
        public UIValidationerrorTitleBar UIValidationerrorTitleBar
        {
            get
            {
                if ((this.mUIValidationerrorTitleBar == null))
                {
                    this.mUIValidationerrorTitleBar = new UIValidationerrorTitleBar(this);
                }
                return this.mUIValidationerrorTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIValidationerrorDialog mUIValidationerrorDialog;
        
        private UIValidationerrorTitleBar mUIValidationerrorTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIValidationerrorDialog : WinControl
    {
        
        public UIValidationerrorDialog(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Validation error";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
            this.WindowTitles.Add("Validation error");
            #endregion
        }
        
        #region Properties
        public WinText UIPleaseinputhostsysteText
        {
            get
            {
                if ((this.mUIPleaseinputhostsysteText == null))
                {
                    this.mUIPleaseinputhostsysteText = new WinText(this);
                    #region Search Criteria
                    this.mUIPleaseinputhostsysteText.SearchProperties[WinText.PropertyNames.Name] = "Please input host system name.Please input host system IP Address.";
                    this.mUIPleaseinputhostsysteText.WindowTitles.Add("Validation error");
                    #endregion
                }
                return this.mUIPleaseinputhostsysteText;
            }
        }
        
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "&OK";
                    this.mUIOKButton.WindowTitles.Add("Validation error");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        
        public WinText UIPleaseinputhostsysteText1
        {
            get
            {
                if ((this.mUIPleaseinputhostsysteText1 == null))
                {
                    this.mUIPleaseinputhostsysteText1 = new WinText(this);
                    #region Search Criteria
                    this.mUIPleaseinputhostsysteText1.SearchProperties[WinText.PropertyNames.Name] = "Please input host system IP Address.";
                    this.mUIPleaseinputhostsysteText1.WindowTitles.Add("Validation error");
                    #endregion
                }
                return this.mUIPleaseinputhostsysteText1;
            }
        }
        
        public WinText UIPleaseinputhostsysteText2
        {
            get
            {
                if ((this.mUIPleaseinputhostsysteText2 == null))
                {
                    this.mUIPleaseinputhostsysteText2 = new WinText(this);
                    #region Search Criteria
                    this.mUIPleaseinputhostsysteText2.SearchProperties[WinText.PropertyNames.Name] = "Please input host system name.";
                    this.mUIPleaseinputhostsysteText2.WindowTitles.Add("Validation error");
                    #endregion
                }
                return this.mUIPleaseinputhostsysteText2;
            }
        }
        
        public WinText UIPleaseinputusernamePText
        {
            get
            {
                if ((this.mUIPleaseinputusernamePText == null))
                {
                    this.mUIPleaseinputusernamePText = new WinText(this);
                    #region Search Criteria
                    this.mUIPleaseinputusernamePText.SearchProperties[WinText.PropertyNames.Name] = "Please input user name.Please input password.";
                    this.mUIPleaseinputusernamePText.WindowTitles.Add("Validation error");
                    #endregion
                }
                return this.mUIPleaseinputusernamePText;
            }
        }
        
        public WinText UIPleaseinputpasswordText
        {
            get
            {
                if ((this.mUIPleaseinputpasswordText == null))
                {
                    this.mUIPleaseinputpasswordText = new WinText(this);
                    #region Search Criteria
                    this.mUIPleaseinputpasswordText.SearchProperties[WinText.PropertyNames.Name] = "Please input password.";
                    this.mUIPleaseinputpasswordText.WindowTitles.Add("Validation error");
                    #endregion
                }
                return this.mUIPleaseinputpasswordText;
            }
        }
        
        public WinText UIPleaseinputusernameText
        {
            get
            {
                if ((this.mUIPleaseinputusernameText == null))
                {
                    this.mUIPleaseinputusernameText = new WinText(this);
                    #region Search Criteria
                    this.mUIPleaseinputusernameText.SearchProperties[WinText.PropertyNames.Name] = "Please input user name.";
                    this.mUIPleaseinputusernameText.WindowTitles.Add("Validation error");
                    #endregion
                }
                return this.mUIPleaseinputusernameText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIPleaseinputhostsysteText;
        
        private WinButton mUIOKButton;
        
        private WinText mUIPleaseinputhostsysteText1;
        
        private WinText mUIPleaseinputhostsysteText2;
        
        private WinText mUIPleaseinputusernamePText;
        
        private WinText mUIPleaseinputpasswordText;
        
        private WinText mUIPleaseinputusernameText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIValidationerrorTitleBar : WinTitleBar
    {
        
        public UIValidationerrorTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Validation error");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Validation error");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIEMCStorageIntegratorWindow : WinWindow
    {
        
        public UIEMCStorageIntegratorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "EMC Storage Integrator (x64)";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MMCMainFrame";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIEMCStorageIntegratorWindow1 UIEMCStorageIntegratorWindow1
        {
            get
            {
                if ((this.mUIEMCStorageIntegratorWindow1 == null))
                {
                    this.mUIEMCStorageIntegratorWindow1 = new UIEMCStorageIntegratorWindow1(this);
                }
                return this.mUIEMCStorageIntegratorWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIEMCStorageIntegratorWindow1 mUIEMCStorageIntegratorWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIEMCStorageIntegratorWindow1 : WinWindow
    {
        
        public UIEMCStorageIntegratorWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65280";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIActionsPane UIActionsPane
        {
            get
            {
                if ((this.mUIActionsPane == null))
                {
                    this.mUIActionsPane = new UIActionsPane(this);
                }
                return this.mUIActionsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIActionsPane mUIActionsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIActionsPane : WinPane
    {
        
        public UIActionsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Actions";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinButton UIAddHostSystemButton
        {
            get
            {
                if ((this.mUIAddHostSystemButton == null))
                {
                    this.mUIAddHostSystemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddHostSystemButton.SearchProperties[WinButton.PropertyNames.Name] = "Add Host System";
                    this.mUIAddHostSystemButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIAddHostSystemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddHostSystemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUnabletoconnectthesyWindow : WinWindow
    {
        
        public UIUnabletoconnectthesyWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Unable to connect the system";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Unable to connect the system");
            #endregion
        }
        
        #region Properties
        public UIUnabletoconnectthesyTitleBar UIUnabletoconnectthesyTitleBar
        {
            get
            {
                if ((this.mUIUnabletoconnectthesyTitleBar == null))
                {
                    this.mUIUnabletoconnectthesyTitleBar = new UIUnabletoconnectthesyTitleBar(this);
                }
                return this.mUIUnabletoconnectthesyTitleBar;
            }
        }
        
        public UIUnabletoconnectthesyDialog UIUnabletoconnectthesyDialog
        {
            get
            {
                if ((this.mUIUnabletoconnectthesyDialog == null))
                {
                    this.mUIUnabletoconnectthesyDialog = new UIUnabletoconnectthesyDialog(this);
                }
                return this.mUIUnabletoconnectthesyDialog;
            }
        }
        #endregion
        
        #region Fields
        private UIUnabletoconnectthesyTitleBar mUIUnabletoconnectthesyTitleBar;
        
        private UIUnabletoconnectthesyDialog mUIUnabletoconnectthesyDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUnabletoconnectthesyTitleBar : WinTitleBar
    {
        
        public UIUnabletoconnectthesyTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Unable to connect the system");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Unable to connect the system");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIUnabletoconnectthesyDialog : WinControl
    {
        
        public UIUnabletoconnectthesyDialog(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Unable to connect the system";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
            this.WindowTitles.Add("Unable to connect the system");
            #endregion
        }
        
        #region Properties
        public WinText UITheRPCserverisunavaiText
        {
            get
            {
                if ((this.mUITheRPCserverisunavaiText == null))
                {
                    this.mUITheRPCserverisunavaiText = new WinText(this);
                    #region Search Criteria
                    this.mUITheRPCserverisunavaiText.SearchProperties[WinText.PropertyNames.Name] = "The RPC server is unavailable. (Exception from HRESULT: 0x800706BA)";
                    this.mUITheRPCserverisunavaiText.WindowTitles.Add("Unable to connect the system");
                    #endregion
                }
                return this.mUITheRPCserverisunavaiText;
            }
        }
        
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "&OK";
                    this.mUIOKButton.WindowTitles.Add("Unable to connect the system");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        
        public WinText UIUsercredentialscannoText
        {
            get
            {
                if ((this.mUIUsercredentialscannoText == null))
                {
                    this.mUIUsercredentialscannoText = new WinText(this);
                    #region Search Criteria
                    this.mUIUsercredentialscannoText.SearchProperties[WinText.PropertyNames.Name] = "User credentials cannot be used for local connections ";
                    this.mUIUsercredentialscannoText.WindowTitles.Add("Unable to connect the system");
                    #endregion
                }
                return this.mUIUsercredentialscannoText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUITheRPCserverisunavaiText;
        
        private WinButton mUIOKButton;
        
        private WinText mUIUsercredentialscannoText;
        #endregion
    }
}
