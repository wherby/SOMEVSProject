// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace UIAutomation.UIMaps.MainWindowClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public partial class MainWindow
    {
        
        /// <summary>
        /// AssertHostAdded - Use 'AssertHostAddedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertHostAdded()
        {
            #region Variable Declarations
            WinTabPage uIHostDisksTabPage = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIHostViewControlWindow.UIHostSystemTabControlTabList.UIHostDisksTabPage;
            WinTabPage uINetworkDisksTabPage = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIHostViewControlWindow.UIHostSystemTabControlTabList.UINetworkDisksTabPage;
            WinTabPage uISANInitiatorsTabPage = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIHostViewControlWindow.UIHostSystemTabControlTabList.UISANInitiatorsTabPage;
            WinButton uICreateDiskButton = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIActionsPane.UICreateDiskButton;
            WinButton uIConnectDiskButton = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIActionsPane.UIConnectDiskButton;
            WinButton uICreateSharedFolderButton = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIActionsPane.UICreateSharedFolderButton;
            WinButton uIMountSharedFolderButton = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIActionsPane.UIMountSharedFolderButton;
            WinButton uIRefreshButton = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIActionsPane.UIRefreshButton;
            WinButton uIPingSystemButton = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIActionsPane.UIPingSystemButton;
            WinButton uIRemoveSystemButton = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIActionsPane.UIRemoveSystemButton;
            WinMenu uIViewMenu = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIActionsPane.UIViewMenu;
            WinButton uIHelpButton = this.UIEMCStorageIntegratorWindow.UIEMCStorageIntegratorWindow1.UIActionsPane.UIHelpButton;
            #endregion

            // Verify that 'Host Disks' tab's property 'Name' equals 'Host Disks'
            Assert.AreEqual(this.AssertHostAddedExpectedValues.UIHostDisksTabPageName, uIHostDisksTabPage.Name);

            // Verify that 'Network Disks' tab's property 'Name' equals 'Network Disks'
            Assert.AreEqual(this.AssertHostAddedExpectedValues.UINetworkDisksTabPageName, uINetworkDisksTabPage.Name);

            // Verify that 'SAN Initiators' tab's property 'Name' equals 'SAN Initiators'
            Assert.AreEqual(this.AssertHostAddedExpectedValues.UISANInitiatorsTabPageName, uISANInitiatorsTabPage.Name);

            // Verify that 'Create Disk' button's property 'Name' equals 'Create Disk'
            Assert.AreEqual(this.AssertHostAddedExpectedValues.UICreateDiskButtonName, uICreateDiskButton.Name);

            // Verify that 'Connect Disk' button's property 'Name' equals 'Connect Disk'
            Assert.AreEqual(this.AssertHostAddedExpectedValues.UIConnectDiskButtonName, uIConnectDiskButton.Name);

            // Verify that 'Create Shared Folder' button's property 'Name' equals 'Create Shared Folder'
            Assert.AreEqual(this.AssertHostAddedExpectedValues.UICreateSharedFolderButtonName, uICreateSharedFolderButton.Name);

            // Verify that 'Mount Shared Folder' button's property 'Name' equals 'Mount Shared Folder'
            Assert.AreEqual(this.AssertHostAddedExpectedValues.UIMountSharedFolderButtonName, uIMountSharedFolderButton.Name);

            // Verify that 'Refresh' button's property 'Name' equals 'Refresh'
            Assert.AreEqual(this.AssertHostAddedExpectedValues.UIRefreshButtonName, uIRefreshButton.Name);

            // Verify that 'Ping System' button's property 'Name' equals 'Ping System'
            Assert.AreEqual(this.AssertHostAddedExpectedValues.UIPingSystemButtonName, uIPingSystemButton.Name);

            // Verify that 'Remove System' button's property 'Name' equals 'Remove System'
            Assert.AreEqual(this.AssertHostAddedExpectedValues.UIRemoveSystemButtonName, uIRemoveSystemButton.Name);

            // Verify that 'View' popup menu's property 'Name' equals 'View'
            Assert.AreEqual(this.AssertHostAddedExpectedValues.UIViewMenuName, uIViewMenu.Name);

            // Verify that 'Help' button's property 'Name' equals 'Help'
            Assert.AreEqual(this.AssertHostAddedExpectedValues.UIHelpButtonName, uIHelpButton.Name);
        }
        
        #region Properties
        public virtual AssertHostAddedExpectedValues AssertHostAddedExpectedValues
        {
            get
            {
                if ((this.mAssertHostAddedExpectedValues == null))
                {
                    this.mAssertHostAddedExpectedValues = new AssertHostAddedExpectedValues();
                }
                return this.mAssertHostAddedExpectedValues;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIEMCStorageIntegratorWindow UIEMCStorageIntegratorWindow
        {
            get
            {
                if ((this.mUIEMCStorageIntegratorWindow == null))
                {
                    this.mUIEMCStorageIntegratorWindow = new UIEMCStorageIntegratorWindow();
                }
                return this.mUIEMCStorageIntegratorWindow;
            }
        }
        
        public UIRemoveSystemWindow UIRemoveSystemWindow
        {
            get
            {
                if ((this.mUIRemoveSystemWindow == null))
                {
                    this.mUIRemoveSystemWindow = new UIRemoveSystemWindow();
                }
                return this.mUIRemoveSystemWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertHostAddedExpectedValues mAssertHostAddedExpectedValues;
        
        private UIItemWindow mUIItemWindow;
        
        private UIEMCStorageIntegratorWindow mUIEMCStorageIntegratorWindow;
        
        private UIRemoveSystemWindow mUIRemoveSystemWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertHostAdded'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertHostAddedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Host Disks' tab's property 'Name' equals 'Host Disks'
        /// </summary>
        public string UIHostDisksTabPageName = "Host Disks";
        
        /// <summary>
        /// Verify that 'Network Disks' tab's property 'Name' equals 'Network Disks'
        /// </summary>
        public string UINetworkDisksTabPageName = "Network Disks";
        
        /// <summary>
        /// Verify that 'SAN Initiators' tab's property 'Name' equals 'SAN Initiators'
        /// </summary>
        public string UISANInitiatorsTabPageName = "SAN Initiators";
        
        /// <summary>
        /// Verify that 'Create Disk' button's property 'Name' equals 'Create Disk'
        /// </summary>
        public string UICreateDiskButtonName = "Create Disk";
        
        /// <summary>
        /// Verify that 'Connect Disk' button's property 'Name' equals 'Connect Disk'
        /// </summary>
        public string UIConnectDiskButtonName = "Connect Disk";
        
        /// <summary>
        /// Verify that 'Create Shared Folder' button's property 'Name' equals 'Create Shared Folder'
        /// </summary>
        public string UICreateSharedFolderButtonName = "Create Shared Folder";
        
        /// <summary>
        /// Verify that 'Mount Shared Folder' button's property 'Name' equals 'Mount Shared Folder'
        /// </summary>
        public string UIMountSharedFolderButtonName = "Mount Shared Folder";
        
        /// <summary>
        /// Verify that 'Refresh' button's property 'Name' equals 'Refresh'
        /// </summary>
        public string UIRefreshButtonName = "Refresh";
        
        /// <summary>
        /// Verify that 'Ping System' button's property 'Name' equals 'Ping System'
        /// </summary>
        public string UIPingSystemButtonName = "Ping System";
        
        /// <summary>
        /// Verify that 'Remove System' button's property 'Name' equals 'Remove System'
        /// </summary>
        public string UIRemoveSystemButtonName = "Remove System";
        
        /// <summary>
        /// Verify that 'View' popup menu's property 'Name' equals 'View'
        /// </summary>
        public string UIViewMenuName = "View";
        
        /// <summary>
        /// Verify that 'Help' button's property 'Name' equals 'Help'
        /// </summary>
        public string UIHelpButtonName = "Help";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Context";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32768";
            #endregion
        }
        
        #region Properties
        public UIContextMenu UIContextMenu
        {
            get
            {
                if ((this.mUIContextMenu == null))
                {
                    this.mUIContextMenu = new UIContextMenu(this);
                }
                return this.mUIContextMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIContextMenu mUIContextMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIContextMenu : WinMenu
    {
        
        public UIContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Context";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICustomizeMenuItem
        {
            get
            {
                if ((this.mUICustomizeMenuItem == null))
                {
                    this.mUICustomizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICustomizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Customize...";
                    #endregion
                }
                return this.mUICustomizeMenuItem;
            }
        }
        
        public WinMenuItem UIDisconnectDiskMenuItem
        {
            get
            {
                if ((this.mUIDisconnectDiskMenuItem == null))
                {
                    this.mUIDisconnectDiskMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIDisconnectDiskMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Disconnect Disk";
                    #endregion
                }
                return this.mUIDisconnectDiskMenuItem;
            }
        }
        
        public WinMenuItem UIConnectMenuItem
        {
            get
            {
                if ((this.mUIConnectMenuItem == null))
                {
                    this.mUIConnectMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIConnectMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Connect...";
                    #endregion
                }
                return this.mUIConnectMenuItem;
            }
        }
        
        public WinMenuItem UIRemoveSystemMenuItem
        {
            get
            {
                if ((this.mUIRemoveSystemMenuItem == null))
                {
                    this.mUIRemoveSystemMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRemoveSystemMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Remove System";
                    #endregion
                }
                return this.mUIRemoveSystemMenuItem;
            }
        }
        
        public WinMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
                    #endregion
                }
                return this.mUIHelpMenuItem;
            }
        }
        
        public WinMenuItem UICreateLUNMenuItem
        {
            get
            {
                if ((this.mUICreateLUNMenuItem == null))
                {
                    this.mUICreateLUNMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICreateLUNMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Create LUN";
                    #endregion
                }
                return this.mUICreateLUNMenuItem;
            }
        }
        
        public WinMenuItem UIDeleteLUNMenuItem
        {
            get
            {
                if ((this.mUIDeleteLUNMenuItem == null))
                {
                    this.mUIDeleteLUNMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIDeleteLUNMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Delete LUN";
                    #endregion
                }
                return this.mUIDeleteLUNMenuItem;
            }
        }
        
        public WinMenuItem UIDeleteDiskMenuItem
        {
            get
            {
                if ((this.mUIDeleteDiskMenuItem == null))
                {
                    this.mUIDeleteDiskMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIDeleteDiskMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Delete Disk";
                    #endregion
                }
                return this.mUIDeleteDiskMenuItem;
            }
        }
        
        public WinMenuItem UIChangeDriveLetterandMenuItem
        {
            get
            {
                if ((this.mUIChangeDriveLetterandMenuItem == null))
                {
                    this.mUIChangeDriveLetterandMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIChangeDriveLetterandMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Change Drive Letter and Paths";
                    #endregion
                }
                return this.mUIChangeDriveLetterandMenuItem;
            }
        }
        
        public WinMenuItem UIAddHostMenuItem
        {
            get
            {
                if ((this.mUIAddHostMenuItem == null))
                {
                    this.mUIAddHostMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAddHostMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Add Host";
                    #endregion
                }
                return this.mUIAddHostMenuItem;
            }
        }
        
        public WinMenuItem UIAddHostSystemMenuItem
        {
            get
            {
                if ((this.mUIAddHostSystemMenuItem == null))
                {
                    this.mUIAddHostSystemMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAddHostSystemMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Add Host System";
                    #endregion
                }
                return this.mUIAddHostSystemMenuItem;
            }
        }
        
        public WinMenuItem UIAddStorageSystemMenuItem
        {
            get
            {
                if ((this.mUIAddStorageSystemMenuItem == null))
                {
                    this.mUIAddStorageSystemMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAddStorageSystemMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Add Storage System";
                    #endregion
                }
                return this.mUIAddStorageSystemMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICustomizeMenuItem;
        
        private WinMenuItem mUIDisconnectDiskMenuItem;
        
        private WinMenuItem mUIConnectMenuItem;
        
        private WinMenuItem mUIRemoveSystemMenuItem;
        
        private WinMenuItem mUIHelpMenuItem;
        
        private WinMenuItem mUICreateLUNMenuItem;
        
        private WinMenuItem mUIDeleteLUNMenuItem;
        
        private WinMenuItem mUIDeleteDiskMenuItem;
        
        private WinMenuItem mUIChangeDriveLetterandMenuItem;
        
        private WinMenuItem mUIAddHostMenuItem;
        
        private WinMenuItem mUIAddHostSystemMenuItem;
        
        private WinMenuItem mUIAddStorageSystemMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIEMCStorageIntegratorWindow : WinWindow
    {
        
        public UIEMCStorageIntegratorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "EMC Storage Integrator (x64)";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MMCMainFrame";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIEMCStorageIntegratorWindow1 UIEMCStorageIntegratorWindow1
        {
            get
            {
                if ((this.mUIEMCStorageIntegratorWindow1 == null))
                {
                    this.mUIEMCStorageIntegratorWindow1 = new UIEMCStorageIntegratorWindow1(this);
                }
                return this.mUIEMCStorageIntegratorWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIEMCStorageIntegratorWindow1 mUIEMCStorageIntegratorWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIEMCStorageIntegratorWindow1 : WinWindow
    {
        
        public UIEMCStorageIntegratorWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65280";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIConnectionLayoutWindow UIConnectionLayoutWindow
        {
            get
            {
                if ((this.mUIConnectionLayoutWindow == null))
                {
                    this.mUIConnectionLayoutWindow = new UIConnectionLayoutWindow(this);
                }
                return this.mUIConnectionLayoutWindow;
            }
        }
        
        public UIStorageSystemNodeGriWindow UIStorageSystemNodeGriWindow
        {
            get
            {
                if ((this.mUIStorageSystemNodeGriWindow == null))
                {
                    this.mUIStorageSystemNodeGriWindow = new UIStorageSystemNodeGriWindow(this);
                }
                return this.mUIStorageSystemNodeGriWindow;
            }
        }
        
        public UIHostSystemNodeGridCoWindow UIHostSystemNodeGridCoWindow
        {
            get
            {
                if ((this.mUIHostSystemNodeGridCoWindow == null))
                {
                    this.mUIHostSystemNodeGridCoWindow = new UIHostSystemNodeGridCoWindow(this);
                }
                return this.mUIHostSystemNodeGridCoWindow;
            }
        }
        
        public UIClusterSystemNodeGriWindow UIClusterSystemNodeGriWindow
        {
            get
            {
                if ((this.mUIClusterSystemNodeGriWindow == null))
                {
                    this.mUIClusterSystemNodeGriWindow = new UIClusterSystemNodeGriWindow(this);
                }
                return this.mUIClusterSystemNodeGriWindow;
            }
        }
        
        public UIActionsPane UIActionsPane
        {
            get
            {
                if ((this.mUIActionsPane == null))
                {
                    this.mUIActionsPane = new UIActionsPane(this);
                }
                return this.mUIActionsPane;
            }
        }
        
        public UIListGridControlWindow UIListGridControlWindow
        {
            get
            {
                if ((this.mUIListGridControlWindow == null))
                {
                    this.mUIListGridControlWindow = new UIListGridControlWindow(this);
                }
                return this.mUIListGridControlWindow;
            }
        }
        
        public UIBlockStorageSystemViWindow UIBlockStorageSystemViWindow
        {
            get
            {
                if ((this.mUIBlockStorageSystemViWindow == null))
                {
                    this.mUIBlockStorageSystemViWindow = new UIBlockStorageSystemViWindow(this);
                }
                return this.mUIBlockStorageSystemViWindow;
            }
        }
        
        public UIStoragePoolGridContrWindow UIStoragePoolGridContrWindow
        {
            get
            {
                if ((this.mUIStoragePoolGridContrWindow == null))
                {
                    this.mUIStoragePoolGridContrWindow = new UIStoragePoolGridContrWindow(this);
                }
                return this.mUIStoragePoolGridContrWindow;
            }
        }
        
        public UILunGridControlWindow UILunGridControlWindow
        {
            get
            {
                if ((this.mUILunGridControlWindow == null))
                {
                    this.mUILunGridControlWindow = new UILunGridControlWindow(this);
                }
                return this.mUILunGridControlWindow;
            }
        }
        
        public UIRemoteHostGridControWindow UIRemoteHostGridControWindow
        {
            get
            {
                if ((this.mUIRemoteHostGridControWindow == null))
                {
                    this.mUIRemoteHostGridControWindow = new UIRemoteHostGridControWindow(this);
                }
                return this.mUIRemoteHostGridControWindow;
            }
        }
        
        public UIClarStorageGroupGridWindow UIClarStorageGroupGridWindow
        {
            get
            {
                if ((this.mUIClarStorageGroupGridWindow == null))
                {
                    this.mUIClarStorageGroupGridWindow = new UIClarStorageGroupGridWindow(this);
                }
                return this.mUIClarStorageGroupGridWindow;
            }
        }
        
        public UIHostViewControlWindow UIHostViewControlWindow
        {
            get
            {
                if ((this.mUIHostViewControlWindow == null))
                {
                    this.mUIHostViewControlWindow = new UIHostViewControlWindow(this);
                }
                return this.mUIHostViewControlWindow;
            }
        }
        
        public UIHostStorageGridContrWindow UIHostStorageGridContrWindow
        {
            get
            {
                if ((this.mUIHostStorageGridContrWindow == null))
                {
                    this.mUIHostStorageGridContrWindow = new UIHostStorageGridContrWindow(this);
                }
                return this.mUIHostStorageGridContrWindow;
            }
        }
        
        public UINetworkSharegridContWindow UINetworkSharegridContWindow
        {
            get
            {
                if ((this.mUINetworkSharegridContWindow == null))
                {
                    this.mUINetworkSharegridContWindow = new UINetworkSharegridContWindow(this);
                }
                return this.mUINetworkSharegridContWindow;
            }
        }
        
        public UIInitiatorGridControlWindow UIInitiatorGridControlWindow
        {
            get
            {
                if ((this.mUIInitiatorGridControlWindow == null))
                {
                    this.mUIInitiatorGridControlWindow = new UIInitiatorGridControlWindow(this);
                }
                return this.mUIInitiatorGridControlWindow;
            }
        }
        
        public UIStatusProgressControWindow UIStatusProgressControWindow
        {
            get
            {
                if ((this.mUIStatusProgressControWindow == null))
                {
                    this.mUIStatusProgressControWindow = new UIStatusProgressControWindow(this);
                }
                return this.mUIStatusProgressControWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UIConnectionLayoutWindow mUIConnectionLayoutWindow;
        
        private UIStorageSystemNodeGriWindow mUIStorageSystemNodeGriWindow;
        
        private UIHostSystemNodeGridCoWindow mUIHostSystemNodeGridCoWindow;
        
        private UIClusterSystemNodeGriWindow mUIClusterSystemNodeGriWindow;
        
        private UIActionsPane mUIActionsPane;
        
        private UIListGridControlWindow mUIListGridControlWindow;
        
        private UIBlockStorageSystemViWindow mUIBlockStorageSystemViWindow;
        
        private UIStoragePoolGridContrWindow mUIStoragePoolGridContrWindow;
        
        private UILunGridControlWindow mUILunGridControlWindow;
        
        private UIRemoteHostGridControWindow mUIRemoteHostGridControWindow;
        
        private UIClarStorageGroupGridWindow mUIClarStorageGroupGridWindow;
        
        private UIHostViewControlWindow mUIHostViewControlWindow;
        
        private UIHostStorageGridContrWindow mUIHostStorageGridContrWindow;
        
        private UINetworkSharegridContWindow mUINetworkSharegridContWindow;
        
        private UIInitiatorGridControlWindow mUIInitiatorGridControlWindow;
        
        private UIStatusProgressControWindow mUIStatusProgressControWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "12785";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIEMCStorageIntegratorTreeItem UIEMCStorageIntegratorTreeItem
        {
            get
            {
                if ((this.mUIEMCStorageIntegratorTreeItem == null))
                {
                    this.mUIEMCStorageIntegratorTreeItem = new UIEMCStorageIntegratorTreeItem(this);
                }
                return this.mUIEMCStorageIntegratorTreeItem;
            }
        }
        
        public WinTree UIItemTree
        {
            get
            {
                if ((this.mUIItemTree == null))
                {
                    this.mUIItemTree = new WinTree(this);
                    #region Search Criteria
                    this.mUIItemTree.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemTree;
            }
        }
        #endregion
        
        #region Fields
        private UIEMCStorageIntegratorTreeItem mUIEMCStorageIntegratorTreeItem;
        
        private WinTree mUIItemTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIEMCStorageIntegratorTreeItem : WinTreeItem
    {
        
        public UIEMCStorageIntegratorTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "EMC Storage Integrator";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIStorageSystemsTreeItem UIStorageSystemsTreeItem
        {
            get
            {
                if ((this.mUIStorageSystemsTreeItem == null))
                {
                    this.mUIStorageSystemsTreeItem = new UIStorageSystemsTreeItem(this);
                }
                return this.mUIStorageSystemsTreeItem;
            }
        }
        
        public UIHostsTreeItem UIHostsTreeItem
        {
            get
            {
                if ((this.mUIHostsTreeItem == null))
                {
                    this.mUIHostsTreeItem = new UIHostsTreeItem(this);
                }
                return this.mUIHostsTreeItem;
            }
        }
        
        public WinTreeItem UIHostClustersTreeItem
        {
            get
            {
                if ((this.mUIHostClustersTreeItem == null))
                {
                    this.mUIHostClustersTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIHostClustersTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Host Clusters";
                    this.mUIHostClustersTreeItem.SearchProperties["Value"] = "1";
                    this.mUIHostClustersTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIHostClustersTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIHostClustersTreeItem.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIHostClustersTreeItem;
            }
        }
        
        public WinTreeItem UIApplicationsTreeItem
        {
            get
            {
                if ((this.mUIApplicationsTreeItem == null))
                {
                    this.mUIApplicationsTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIApplicationsTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Applications";
                    this.mUIApplicationsTreeItem.SearchProperties["Value"] = "1";
                    this.mUIApplicationsTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIApplicationsTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIApplicationsTreeItem.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIApplicationsTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIStorageSystemsTreeItem mUIStorageSystemsTreeItem;
        
        private UIHostsTreeItem mUIHostsTreeItem;
        
        private WinTreeItem mUIHostClustersTreeItem;
        
        private WinTreeItem mUIApplicationsTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIStorageSystemsTreeItem : WinTreeItem
    {
        
        public UIStorageSystemsTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Storage Systems";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIVnx167_168APM0011390TreeItem
        {
            get
            {
                if ((this.mUIVnx167_168APM0011390TreeItem == null))
                {
                    this.mUIVnx167_168APM0011390TreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIVnx167_168APM0011390TreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "vnx167_168 - APM00113902390";
                    this.mUIVnx167_168APM0011390TreeItem.SearchProperties["Value"] = "2";
                    this.mUIVnx167_168APM0011390TreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIVnx167_168APM0011390TreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIVnx167_168APM0011390TreeItem.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIVnx167_168APM0011390TreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIVnx167_168APM0011390TreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHostsTreeItem : WinTreeItem
    {
        
        public UIHostsTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Hosts";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UILAMANNASRVVM3sr5domeTreeItem
        {
            get
            {
                if ((this.mUILAMANNASRVVM3sr5domeTreeItem == null))
                {
                    this.mUILAMANNASRVVM3sr5domeTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUILAMANNASRVVM3sr5domeTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "LAMANNA-SRV-VM3.sr5dom.eng.emc.com - 10.5.222.54";
                    this.mUILAMANNASRVVM3sr5domeTreeItem.SearchProperties["Value"] = "2";
                    this.mUILAMANNASRVVM3sr5domeTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUILAMANNASRVVM3sr5domeTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUILAMANNASRVVM3sr5domeTreeItem.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUILAMANNASRVVM3sr5domeTreeItem;
            }
        }
        
        public WinTreeItem UIEg_server_2008_3sr5dTreeItem
        {
            get
            {
                if ((this.mUIEg_server_2008_3sr5dTreeItem == null))
                {
                    this.mUIEg_server_2008_3sr5dTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIEg_server_2008_3sr5dTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "eg_server_2008_3.sr5dom.eng.emc.com - 10.5.222.69";
                    this.mUIEg_server_2008_3sr5dTreeItem.SearchProperties["Value"] = "2";
                    this.mUIEg_server_2008_3sr5dTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIEg_server_2008_3sr5dTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIEg_server_2008_3sr5dTreeItem.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIEg_server_2008_3sr5dTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUILAMANNASRVVM3sr5domeTreeItem;
        
        private WinTreeItem mUIEg_server_2008_3sr5dTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIConnectionLayoutWindow : WinWindow
    {
        
        public UIConnectionLayoutWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "mainLayoutControl";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIAddStorageSystemClient UIAddStorageSystemClient
        {
            get
            {
                if ((this.mUIAddStorageSystemClient == null))
                {
                    this.mUIAddStorageSystemClient = new UIAddStorageSystemClient(this);
                }
                return this.mUIAddStorageSystemClient;
            }
        }
        
        public UIAddHostClient UIAddHostClient
        {
            get
            {
                if ((this.mUIAddHostClient == null))
                {
                    this.mUIAddHostClient = new UIAddHostClient(this);
                }
                return this.mUIAddHostClient;
            }
        }
        
        public UIAddClusterClient UIAddClusterClient
        {
            get
            {
                if ((this.mUIAddClusterClient == null))
                {
                    this.mUIAddClusterClient = new UIAddClusterClient(this);
                }
                return this.mUIAddClusterClient;
            }
        }
        
        public UIAddApplicationClient UIAddApplicationClient
        {
            get
            {
                if ((this.mUIAddApplicationClient == null))
                {
                    this.mUIAddApplicationClient = new UIAddApplicationClient(this);
                }
                return this.mUIAddApplicationClient;
            }
        }
        #endregion
        
        #region Fields
        private UIAddStorageSystemClient mUIAddStorageSystemClient;
        
        private UIAddHostClient mUIAddHostClient;
        
        private UIAddClusterClient mUIAddClusterClient;
        
        private UIAddApplicationClient mUIAddApplicationClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAddStorageSystemClient : WinClient
    {
        
        public UIAddStorageSystemClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Add Storage System";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAddStorageSystemHperEdit
        {
            get
            {
                if ((this.mUIAddStorageSystemHperEdit == null))
                {
                    this.mUIAddStorageSystemHperEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAddStorageSystemHperEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Add Storage System";
                    this.mUIAddStorageSystemHperEdit.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIAddStorageSystemHperEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAddStorageSystemHperEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAddHostClient : WinClient
    {
        
        public UIAddHostClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Add Host";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAddHostNodeHyperLinkEdit
        {
            get
            {
                if ((this.mUIAddHostNodeHyperLinkEdit == null))
                {
                    this.mUIAddHostNodeHyperLinkEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAddHostNodeHyperLinkEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Add Host";
                    this.mUIAddHostNodeHyperLinkEdit.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIAddHostNodeHyperLinkEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAddHostNodeHyperLinkEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAddClusterClient : WinClient
    {
        
        public UIAddClusterClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Add Cluster";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAddClusterSystemHypeEdit
        {
            get
            {
                if ((this.mUIAddClusterSystemHypeEdit == null))
                {
                    this.mUIAddClusterSystemHypeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAddClusterSystemHypeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Add Cluster";
                    this.mUIAddClusterSystemHypeEdit.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIAddClusterSystemHypeEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAddClusterSystemHypeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAddApplicationClient : WinClient
    {
        
        public UIAddApplicationClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Add Application";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinEdit UIApplicationHyperLinkEdit
        {
            get
            {
                if ((this.mUIApplicationHyperLinkEdit == null))
                {
                    this.mUIApplicationHyperLinkEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIApplicationHyperLinkEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Add Application";
                    this.mUIApplicationHyperLinkEdit.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIApplicationHyperLinkEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIApplicationHyperLinkEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIStorageSystemNodeGriWindow : WinWindow
    {
        
        public UIStorageSystemNodeGriWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "storageSystemNodeGridControl";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIStorageSystemNodeGriTable UIStorageSystemNodeGriTable
        {
            get
            {
                if ((this.mUIStorageSystemNodeGriTable == null))
                {
                    this.mUIStorageSystemNodeGriTable = new UIStorageSystemNodeGriTable(this);
                }
                return this.mUIStorageSystemNodeGriTable;
            }
        }
        
        public WinClient UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
                    this.mUIDataPanelClient.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIStorageSystemNodeGriTable mUIStorageSystemNodeGriTable;
        
        private WinClient mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIStorageSystemNodeGriTable : WinTable
    {
        
        public UIStorageSystemNodeGriTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIHeaderPanelClient UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new UIHeaderPanelClient(this);
                }
                return this.mUIHeaderPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderPanelClient mUIHeaderPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHeaderPanelClient : WinClient
    {
        
        public UIHeaderPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHostSystemNodeGridCoWindow : WinWindow
    {
        
        public UIHostSystemNodeGridCoWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "hostSystemNodeGridControl";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIHostSystemNodeGridCoTable UIHostSystemNodeGridCoTable
        {
            get
            {
                if ((this.mUIHostSystemNodeGridCoTable == null))
                {
                    this.mUIHostSystemNodeGridCoTable = new UIHostSystemNodeGridCoTable(this);
                }
                return this.mUIHostSystemNodeGridCoTable;
            }
        }
        
        public WinClient UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
                    this.mUIDataPanelClient.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIHostSystemNodeGridCoTable mUIHostSystemNodeGridCoTable;
        
        private WinClient mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHostSystemNodeGridCoTable : WinTable
    {
        
        public UIHostSystemNodeGridCoTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIHeaderPanelClient1 UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new UIHeaderPanelClient1(this);
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public UIDataPanelClient UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new UIDataPanelClient(this);
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderPanelClient1 mUIHeaderPanelClient;
        
        private UIDataPanelClient mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHeaderPanelClient1 : WinClient
    {
        
        public UIHeaderPanelClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataPanelClient : WinClient
    {
        
        public UIDataPanelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinRow UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow1Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
                    this.mUIRow1Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIRow1Row.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIRow1Row;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUIRow1Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIClusterSystemNodeGriWindow : WinWindow
    {
        
        public UIClusterSystemNodeGriWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "clusterSystemNodeGridControl";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIClusterSystemNodeGriTable UIClusterSystemNodeGriTable
        {
            get
            {
                if ((this.mUIClusterSystemNodeGriTable == null))
                {
                    this.mUIClusterSystemNodeGriTable = new UIClusterSystemNodeGriTable(this);
                }
                return this.mUIClusterSystemNodeGriTable;
            }
        }
        #endregion
        
        #region Fields
        private UIClusterSystemNodeGriTable mUIClusterSystemNodeGriTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIClusterSystemNodeGriTable : WinTable
    {
        
        public UIClusterSystemNodeGriTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIHeaderPanelClient2 UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new UIHeaderPanelClient2(this);
                }
                return this.mUIHeaderPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderPanelClient2 mUIHeaderPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHeaderPanelClient2 : WinClient
    {
        
        public UIHeaderPanelClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIActionsPane : WinPane
    {
        
        public UIActionsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Actions";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinControl UIStorageSystemsTreeButton
        {
            get
            {
                if ((this.mUIStorageSystemsTreeButton == null))
                {
                    this.mUIStorageSystemsTreeButton = new WinControl(this);
                    #region Search Criteria
                    this.mUIStorageSystemsTreeButton.SearchProperties[UITestControl.PropertyNames.Name] = "Storage Systems";
                    this.mUIStorageSystemsTreeButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "TreeButton";
                    this.mUIStorageSystemsTreeButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIStorageSystemsTreeButton;
            }
        }
        
        public WinButton UIAddStorageSystemButton
        {
            get
            {
                if ((this.mUIAddStorageSystemButton == null))
                {
                    this.mUIAddStorageSystemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddStorageSystemButton.SearchProperties[WinButton.PropertyNames.Name] = "Add Storage System";
                    this.mUIAddStorageSystemButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIAddStorageSystemButton;
            }
        }
        
        public WinMenu UIViewMenu
        {
            get
            {
                if ((this.mUIViewMenu == null))
                {
                    this.mUIViewMenu = new WinMenu(this);
                    #region Search Criteria
                    this.mUIViewMenu.SearchProperties[WinMenu.PropertyNames.Name] = "View";
                    this.mUIViewMenu.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIViewMenu;
            }
        }
        
        public WinButton UIHelpButton
        {
            get
            {
                if ((this.mUIHelpButton == null))
                {
                    this.mUIHelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIHelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Help";
                    this.mUIHelpButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIHelpButton;
            }
        }
        
        public WinButton UIConnectButton
        {
            get
            {
                if ((this.mUIConnectButton == null))
                {
                    this.mUIConnectButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIConnectButton.SearchProperties[WinButton.PropertyNames.Name] = "Connect...";
                    this.mUIConnectButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIConnectButton;
            }
        }
        
        public WinButton UIRemoveSystemButton
        {
            get
            {
                if ((this.mUIRemoveSystemButton == null))
                {
                    this.mUIRemoveSystemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRemoveSystemButton.SearchProperties[WinButton.PropertyNames.Name] = "Remove System";
                    this.mUIRemoveSystemButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIRemoveSystemButton;
            }
        }
        
        public WinButton UIHelpButton1
        {
            get
            {
                if ((this.mUIHelpButton1 == null))
                {
                    this.mUIHelpButton1 = new WinButton(this);
                    #region Search Criteria
                    this.mUIHelpButton1.SearchProperties[WinButton.PropertyNames.Name] = "Help";
                    this.mUIHelpButton1.SearchProperties[WinButton.PropertyNames.Instance] = "2";
                    this.mUIHelpButton1.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIHelpButton1;
            }
        }
        
        public WinButton UICreateLUNButton
        {
            get
            {
                if ((this.mUICreateLUNButton == null))
                {
                    this.mUICreateLUNButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICreateLUNButton.SearchProperties[WinButton.PropertyNames.Name] = "Create LUN";
                    this.mUICreateLUNButton.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUICreateLUNButton.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
                    this.mUICreateLUNButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUICreateLUNButton;
            }
        }
        
        public WinButton UIRefreshButton
        {
            get
            {
                if ((this.mUIRefreshButton == null))
                {
                    this.mUIRefreshButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRefreshButton.SearchProperties[WinButton.PropertyNames.Name] = "Refresh";
                    this.mUIRefreshButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIRefreshButton;
            }
        }
        
        public WinButton UIPingSystemButton
        {
            get
            {
                if ((this.mUIPingSystemButton == null))
                {
                    this.mUIPingSystemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPingSystemButton.SearchProperties[WinButton.PropertyNames.Name] = "Ping System";
                    this.mUIPingSystemButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIPingSystemButton;
            }
        }
        
        public WinButton UICreateLUNButton1
        {
            get
            {
                if ((this.mUICreateLUNButton1 == null))
                {
                    this.mUICreateLUNButton1 = new WinButton(this);
                    #region Search Criteria
                    this.mUICreateLUNButton1.SearchProperties[WinButton.PropertyNames.Name] = "Create LUN";
                    this.mUICreateLUNButton1.SearchProperties[WinButton.PropertyNames.Instance] = "2";
                    this.mUICreateLUNButton1.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUICreateLUNButton1;
            }
        }
        
        public WinControl UIHostsTreeButton
        {
            get
            {
                if ((this.mUIHostsTreeButton == null))
                {
                    this.mUIHostsTreeButton = new WinControl(this);
                    #region Search Criteria
                    this.mUIHostsTreeButton.SearchProperties[UITestControl.PropertyNames.Name] = "Hosts";
                    this.mUIHostsTreeButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "TreeButton";
                    this.mUIHostsTreeButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIHostsTreeButton;
            }
        }
        
        public WinButton UIAddHostSystemButton
        {
            get
            {
                if ((this.mUIAddHostSystemButton == null))
                {
                    this.mUIAddHostSystemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddHostSystemButton.SearchProperties[WinButton.PropertyNames.Name] = "Add Host System";
                    this.mUIAddHostSystemButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIAddHostSystemButton;
            }
        }
        
        public WinButton UICreateDiskButton
        {
            get
            {
                if ((this.mUICreateDiskButton == null))
                {
                    this.mUICreateDiskButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICreateDiskButton.SearchProperties[WinButton.PropertyNames.Name] = "Create Disk";
                    this.mUICreateDiskButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUICreateDiskButton;
            }
        }
        
        public WinButton UIConnectDiskButton
        {
            get
            {
                if ((this.mUIConnectDiskButton == null))
                {
                    this.mUIConnectDiskButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIConnectDiskButton.SearchProperties[WinButton.PropertyNames.Name] = "Connect Disk";
                    this.mUIConnectDiskButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIConnectDiskButton;
            }
        }
        
        public WinButton UICreateSharedFolderButton
        {
            get
            {
                if ((this.mUICreateSharedFolderButton == null))
                {
                    this.mUICreateSharedFolderButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICreateSharedFolderButton.SearchProperties[WinButton.PropertyNames.Name] = "Create Shared Folder";
                    this.mUICreateSharedFolderButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUICreateSharedFolderButton;
            }
        }
        
        public WinButton UIMountSharedFolderButton
        {
            get
            {
                if ((this.mUIMountSharedFolderButton == null))
                {
                    this.mUIMountSharedFolderButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMountSharedFolderButton.SearchProperties[WinButton.PropertyNames.Name] = "Mount Shared Folder";
                    this.mUIMountSharedFolderButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIMountSharedFolderButton;
            }
        }
        
        public WinControl UIHostClustersTreeButton
        {
            get
            {
                if ((this.mUIHostClustersTreeButton == null))
                {
                    this.mUIHostClustersTreeButton = new WinControl(this);
                    #region Search Criteria
                    this.mUIHostClustersTreeButton.SearchProperties[UITestControl.PropertyNames.Name] = "Host Clusters";
                    this.mUIHostClustersTreeButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "TreeButton";
                    this.mUIHostClustersTreeButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIHostClustersTreeButton;
            }
        }
        
        public WinButton UIAddClusterSystemButton
        {
            get
            {
                if ((this.mUIAddClusterSystemButton == null))
                {
                    this.mUIAddClusterSystemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddClusterSystemButton.SearchProperties[WinButton.PropertyNames.Name] = "Add Cluster System";
                    this.mUIAddClusterSystemButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIAddClusterSystemButton;
            }
        }
        
        public WinControl UIApplicationsTreeButton
        {
            get
            {
                if ((this.mUIApplicationsTreeButton == null))
                {
                    this.mUIApplicationsTreeButton = new WinControl(this);
                    #region Search Criteria
                    this.mUIApplicationsTreeButton.SearchProperties[UITestControl.PropertyNames.Name] = "Applications";
                    this.mUIApplicationsTreeButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "TreeButton";
                    this.mUIApplicationsTreeButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIApplicationsTreeButton;
            }
        }
        
        public WinButton UIAddHostButton
        {
            get
            {
                if ((this.mUIAddHostButton == null))
                {
                    this.mUIAddHostButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddHostButton.SearchProperties[WinButton.PropertyNames.Name] = "Add Host";
                    this.mUIAddHostButton.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIAddHostButton;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIStorageSystemsTreeButton;
        
        private WinButton mUIAddStorageSystemButton;
        
        private WinMenu mUIViewMenu;
        
        private WinButton mUIHelpButton;
        
        private WinButton mUIConnectButton;
        
        private WinButton mUIRemoveSystemButton;
        
        private WinButton mUIHelpButton1;
        
        private WinButton mUICreateLUNButton;
        
        private WinButton mUIRefreshButton;
        
        private WinButton mUIPingSystemButton;
        
        private WinButton mUICreateLUNButton1;
        
        private WinControl mUIHostsTreeButton;
        
        private WinButton mUIAddHostSystemButton;
        
        private WinButton mUICreateDiskButton;
        
        private WinButton mUIConnectDiskButton;
        
        private WinButton mUICreateSharedFolderButton;
        
        private WinButton mUIMountSharedFolderButton;
        
        private WinControl mUIHostClustersTreeButton;
        
        private WinButton mUIAddClusterSystemButton;
        
        private WinControl mUIApplicationsTreeButton;
        
        private WinButton mUIAddHostButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIListGridControlWindow : WinWindow
    {
        
        public UIListGridControlWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "listGridControl";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinClient UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIHeaderPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Header Panel";
                    this.mUIHeaderPanelClient.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public UIListGridControlTable UIListGridControlTable
        {
            get
            {
                if ((this.mUIListGridControlTable == null))
                {
                    this.mUIListGridControlTable = new UIListGridControlTable(this);
                }
                return this.mUIListGridControlTable;
            }
        }
        
        public WinClient UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
                    this.mUIDataPanelClient.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIHeaderPanelClient;
        
        private UIListGridControlTable mUIListGridControlTable;
        
        private WinClient mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIListGridControlTable : WinTable
    {
        
        public UIListGridControlTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIDataPanelClient1 UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new UIDataPanelClient1(this);
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIDataPanelClient1 mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataPanelClient1 : WinClient
    {
        
        public UIDataPanelClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinRow UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow1Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
                    this.mUIRow1Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIRow1Row.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIRow1Row;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUIRow1Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBlockStorageSystemViWindow : WinWindow
    {
        
        public UIBlockStorageSystemViWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "BlockStorageSystemViewControl";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIStorageSystemTabContTabList UIStorageSystemTabContTabList
        {
            get
            {
                if ((this.mUIStorageSystemTabContTabList == null))
                {
                    this.mUIStorageSystemTabContTabList = new UIStorageSystemTabContTabList(this);
                }
                return this.mUIStorageSystemTabContTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIStorageSystemTabContTabList mUIStorageSystemTabContTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIStorageSystemTabContTabList : WinTabList
    {
        
        public UIStorageSystemTabContTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIStoragePoolsTabPage
        {
            get
            {
                if ((this.mUIStoragePoolsTabPage == null))
                {
                    this.mUIStoragePoolsTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIStoragePoolsTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Storage Pools";
                    this.mUIStoragePoolsTabPage.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIStoragePoolsTabPage;
            }
        }
        
        public WinTabPage UILUNsTabPage
        {
            get
            {
                if ((this.mUILUNsTabPage == null))
                {
                    this.mUILUNsTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUILUNsTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "LUNs";
                    this.mUILUNsTabPage.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUILUNsTabPage;
            }
        }
        
        public WinTabPage UIRegisteredHostsTabPage
        {
            get
            {
                if ((this.mUIRegisteredHostsTabPage == null))
                {
                    this.mUIRegisteredHostsTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIRegisteredHostsTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Registered Hosts";
                    this.mUIRegisteredHostsTabPage.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIRegisteredHostsTabPage;
            }
        }
        
        public WinTabPage UIStorageGroupsTabPage
        {
            get
            {
                if ((this.mUIStorageGroupsTabPage == null))
                {
                    this.mUIStorageGroupsTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIStorageGroupsTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Storage Groups";
                    this.mUIStorageGroupsTabPage.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIStorageGroupsTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIStoragePoolsTabPage;
        
        private WinTabPage mUILUNsTabPage;
        
        private WinTabPage mUIRegisteredHostsTabPage;
        
        private WinTabPage mUIStorageGroupsTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIStoragePoolGridContrWindow : WinWindow
    {
        
        public UIStoragePoolGridContrWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "storagePoolGridControl";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIStoragePoolGridContrTable UIStoragePoolGridContrTable
        {
            get
            {
                if ((this.mUIStoragePoolGridContrTable == null))
                {
                    this.mUIStoragePoolGridContrTable = new UIStoragePoolGridContrTable(this);
                }
                return this.mUIStoragePoolGridContrTable;
            }
        }
        
        public WinClient UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIHeaderPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Header Panel";
                    this.mUIHeaderPanelClient.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public WinClient UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
                    this.mUIDataPanelClient.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIStoragePoolGridContrTable mUIStoragePoolGridContrTable;
        
        private WinClient mUIHeaderPanelClient;
        
        private WinClient mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIStoragePoolGridContrTable : WinTable
    {
        
        public UIStoragePoolGridContrTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIHeaderPanelClient3 UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new UIHeaderPanelClient3(this);
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public UIDataPanelClient2 UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new UIDataPanelClient2(this);
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderPanelClient3 mUIHeaderPanelClient;
        
        private UIDataPanelClient2 mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHeaderPanelClient3 : WinClient
    {
        
        public UIHeaderPanelClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader;
            }
        }
        
        public WinRowHeader UIItemRowHeader1
        {
            get
            {
                if ((this.mUIItemRowHeader1 == null))
                {
                    this.mUIItemRowHeader1 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader1.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader1;
            }
        }
        
        public WinRowHeader UIItemRowHeader2
        {
            get
            {
                if ((this.mUIItemRowHeader2 == null))
                {
                    this.mUIItemRowHeader2 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader2.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader2;
            }
        }
        
        public WinRowHeader UIItemRowHeader3
        {
            get
            {
                if ((this.mUIItemRowHeader3 == null))
                {
                    this.mUIItemRowHeader3 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader3.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader3;
            }
        }
        
        public WinRowHeader UIItemRowHeader4
        {
            get
            {
                if ((this.mUIItemRowHeader4 == null))
                {
                    this.mUIItemRowHeader4 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader4.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader4;
            }
        }
        
        public WinRowHeader UIItemRowHeader5
        {
            get
            {
                if ((this.mUIItemRowHeader5 == null))
                {
                    this.mUIItemRowHeader5 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader5.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader5;
            }
        }
        
        public WinRowHeader UIItemRowHeader6
        {
            get
            {
                if ((this.mUIItemRowHeader6 == null))
                {
                    this.mUIItemRowHeader6 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader6.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader6;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        
        private WinRowHeader mUIItemRowHeader1;
        
        private WinRowHeader mUIItemRowHeader2;
        
        private WinRowHeader mUIItemRowHeader3;
        
        private WinRowHeader mUIItemRowHeader4;
        
        private WinRowHeader mUIItemRowHeader5;
        
        private WinRowHeader mUIItemRowHeader6;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataPanelClient2 : WinClient
    {
        
        public UIDataPanelClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinRow UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow1Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
                    this.mUIRow1Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIRow1Row.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIRow1Row;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUIRow1Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILunGridControlWindow : WinWindow
    {
        
        public UILunGridControlWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lunGridControl";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UILunGridControlTable UILunGridControlTable
        {
            get
            {
                if ((this.mUILunGridControlTable == null))
                {
                    this.mUILunGridControlTable = new UILunGridControlTable(this);
                }
                return this.mUILunGridControlTable;
            }
        }
        
        public WinClient UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataPanelClient.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
                    this.mUIDataPanelClient.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UILunGridControlTable mUILunGridControlTable;
        
        private WinClient mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILunGridControlTable : WinTable
    {
        
        public UILunGridControlTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIHeaderPanelClient4 UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new UIHeaderPanelClient4(this);
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public UIDataPanelClient3 UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new UIDataPanelClient3(this);
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderPanelClient4 mUIHeaderPanelClient;
        
        private UIDataPanelClient3 mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHeaderPanelClient4 : WinClient
    {
        
        public UIHeaderPanelClient4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader;
            }
        }
        
        public WinRowHeader UIItemRowHeader1
        {
            get
            {
                if ((this.mUIItemRowHeader1 == null))
                {
                    this.mUIItemRowHeader1 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader1.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader1;
            }
        }
        
        public WinRowHeader UIItemRowHeader2
        {
            get
            {
                if ((this.mUIItemRowHeader2 == null))
                {
                    this.mUIItemRowHeader2 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader2.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader2;
            }
        }
        
        public WinRowHeader UIItemRowHeader3
        {
            get
            {
                if ((this.mUIItemRowHeader3 == null))
                {
                    this.mUIItemRowHeader3 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader3.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader3;
            }
        }
        
        public WinRowHeader UIItemRowHeader4
        {
            get
            {
                if ((this.mUIItemRowHeader4 == null))
                {
                    this.mUIItemRowHeader4 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader4.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader4;
            }
        }
        
        public WinRowHeader UIItemRowHeader5
        {
            get
            {
                if ((this.mUIItemRowHeader5 == null))
                {
                    this.mUIItemRowHeader5 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader5.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader5;
            }
        }
        
        public WinRowHeader UIItemRowHeader6
        {
            get
            {
                if ((this.mUIItemRowHeader6 == null))
                {
                    this.mUIItemRowHeader6 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader6.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader6;
            }
        }
        
        public WinRowHeader UIItemRowHeader7
        {
            get
            {
                if ((this.mUIItemRowHeader7 == null))
                {
                    this.mUIItemRowHeader7 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader7.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader7;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        
        private WinRowHeader mUIItemRowHeader1;
        
        private WinRowHeader mUIItemRowHeader2;
        
        private WinRowHeader mUIItemRowHeader3;
        
        private WinRowHeader mUIItemRowHeader4;
        
        private WinRowHeader mUIItemRowHeader5;
        
        private WinRowHeader mUIItemRowHeader6;
        
        private WinRowHeader mUIItemRowHeader7;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataPanelClient3 : WinClient
    {
        
        public UIDataPanelClient3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinRow UIRow5Row
        {
            get
            {
                if ((this.mUIRow5Row == null))
                {
                    this.mUIRow5Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow5Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 5";
                    this.mUIRow5Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIRow5Row.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIRow5Row;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUIRow5Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRemoteHostGridControWindow : WinWindow
    {
        
        public UIRemoteHostGridControWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "remoteHostGridControl";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIRemoteHostGridControTable UIRemoteHostGridControTable
        {
            get
            {
                if ((this.mUIRemoteHostGridControTable == null))
                {
                    this.mUIRemoteHostGridControTable = new UIRemoteHostGridControTable(this);
                }
                return this.mUIRemoteHostGridControTable;
            }
        }
        #endregion
        
        #region Fields
        private UIRemoteHostGridControTable mUIRemoteHostGridControTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRemoteHostGridControTable : WinTable
    {
        
        public UIRemoteHostGridControTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIHeaderPanelClient5 UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new UIHeaderPanelClient5(this);
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public UIDataPanelClient4 UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new UIDataPanelClient4(this);
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderPanelClient5 mUIHeaderPanelClient;
        
        private UIDataPanelClient4 mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHeaderPanelClient5 : WinClient
    {
        
        public UIHeaderPanelClient5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader;
            }
        }
        
        public WinRowHeader UIItemRowHeader1
        {
            get
            {
                if ((this.mUIItemRowHeader1 == null))
                {
                    this.mUIItemRowHeader1 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader1.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader1;
            }
        }
        
        public WinRowHeader UIItemRowHeader2
        {
            get
            {
                if ((this.mUIItemRowHeader2 == null))
                {
                    this.mUIItemRowHeader2 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader2.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader2;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        
        private WinRowHeader mUIItemRowHeader1;
        
        private WinRowHeader mUIItemRowHeader2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataPanelClient4 : WinClient
    {
        
        public UIDataPanelClient4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinRow UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow1Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
                    this.mUIRow1Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIRow1Row.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIRow1Row;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUIRow1Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIClarStorageGroupGridWindow : WinWindow
    {
        
        public UIClarStorageGroupGridWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "clarStorageGroupGridControl";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIClarStorageGroupGridTable UIClarStorageGroupGridTable
        {
            get
            {
                if ((this.mUIClarStorageGroupGridTable == null))
                {
                    this.mUIClarStorageGroupGridTable = new UIClarStorageGroupGridTable(this);
                }
                return this.mUIClarStorageGroupGridTable;
            }
        }
        #endregion
        
        #region Fields
        private UIClarStorageGroupGridTable mUIClarStorageGroupGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIClarStorageGroupGridTable : WinTable
    {
        
        public UIClarStorageGroupGridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIHeaderPanelClient6 UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new UIHeaderPanelClient6(this);
                }
                return this.mUIHeaderPanelClient;
            }
        }
        
        public UIDataPanelClient5 UIDataPanelClient
        {
            get
            {
                if ((this.mUIDataPanelClient == null))
                {
                    this.mUIDataPanelClient = new UIDataPanelClient5(this);
                }
                return this.mUIDataPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderPanelClient6 mUIHeaderPanelClient;
        
        private UIDataPanelClient5 mUIDataPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHeaderPanelClient6 : WinClient
    {
        
        public UIHeaderPanelClient6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader;
            }
        }
        
        public WinRowHeader UIItemRowHeader1
        {
            get
            {
                if ((this.mUIItemRowHeader1 == null))
                {
                    this.mUIItemRowHeader1 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader1.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader1;
            }
        }
        
        public WinRowHeader UIItemRowHeader2
        {
            get
            {
                if ((this.mUIItemRowHeader2 == null))
                {
                    this.mUIItemRowHeader2 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader2.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader2;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        
        private WinRowHeader mUIItemRowHeader1;
        
        private WinRowHeader mUIItemRowHeader2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataPanelClient5 : WinClient
    {
        
        public UIDataPanelClient5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Data Panel";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinRow UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new WinRow(this);
                    #region Search Criteria
                    this.mUIRow1Row.SearchProperties[WinRow.PropertyNames.Name] = "Row 1";
                    this.mUIRow1Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIRow1Row.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIRow1Row;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUIRow1Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHostViewControlWindow : WinWindow
    {
        
        public UIHostViewControlWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "HostViewControl";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIHostSystemTabControlTabList UIHostSystemTabControlTabList
        {
            get
            {
                if ((this.mUIHostSystemTabControlTabList == null))
                {
                    this.mUIHostSystemTabControlTabList = new UIHostSystemTabControlTabList(this);
                }
                return this.mUIHostSystemTabControlTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIHostSystemTabControlTabList mUIHostSystemTabControlTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHostSystemTabControlTabList : WinTabList
    {
        
        public UIHostSystemTabControlTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIHostDisksTabPage
        {
            get
            {
                if ((this.mUIHostDisksTabPage == null))
                {
                    this.mUIHostDisksTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIHostDisksTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Host Disks";
                    this.mUIHostDisksTabPage.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIHostDisksTabPage;
            }
        }
        
        public WinTabPage UINetworkDisksTabPage
        {
            get
            {
                if ((this.mUINetworkDisksTabPage == null))
                {
                    this.mUINetworkDisksTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUINetworkDisksTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Network Disks";
                    this.mUINetworkDisksTabPage.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUINetworkDisksTabPage;
            }
        }
        
        public WinTabPage UISANInitiatorsTabPage
        {
            get
            {
                if ((this.mUISANInitiatorsTabPage == null))
                {
                    this.mUISANInitiatorsTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUISANInitiatorsTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "SAN Initiators";
                    this.mUISANInitiatorsTabPage.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUISANInitiatorsTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIHostDisksTabPage;
        
        private WinTabPage mUINetworkDisksTabPage;
        
        private WinTabPage mUISANInitiatorsTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHostStorageGridContrWindow : WinWindow
    {
        
        public UIHostStorageGridContrWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "hostStorageGridControl";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIHostStorageGridContrTable UIHostStorageGridContrTable
        {
            get
            {
                if ((this.mUIHostStorageGridContrTable == null))
                {
                    this.mUIHostStorageGridContrTable = new UIHostStorageGridContrTable(this);
                }
                return this.mUIHostStorageGridContrTable;
            }
        }
        #endregion
        
        #region Fields
        private UIHostStorageGridContrTable mUIHostStorageGridContrTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHostStorageGridContrTable : WinTable
    {
        
        public UIHostStorageGridContrTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIHeaderPanelClient7 UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new UIHeaderPanelClient7(this);
                }
                return this.mUIHeaderPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderPanelClient7 mUIHeaderPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHeaderPanelClient7 : WinClient
    {
        
        public UIHeaderPanelClient7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader;
            }
        }
        
        public WinRowHeader UIItemRowHeader1
        {
            get
            {
                if ((this.mUIItemRowHeader1 == null))
                {
                    this.mUIItemRowHeader1 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader1.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader1;
            }
        }
        
        public WinRowHeader UIItemRowHeader2
        {
            get
            {
                if ((this.mUIItemRowHeader2 == null))
                {
                    this.mUIItemRowHeader2 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader2.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader2;
            }
        }
        
        public WinRowHeader UIItemRowHeader3
        {
            get
            {
                if ((this.mUIItemRowHeader3 == null))
                {
                    this.mUIItemRowHeader3 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader3.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader3;
            }
        }
        
        public WinRowHeader UIItemRowHeader4
        {
            get
            {
                if ((this.mUIItemRowHeader4 == null))
                {
                    this.mUIItemRowHeader4 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader4.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader4;
            }
        }
        
        public WinRowHeader UIItemRowHeader5
        {
            get
            {
                if ((this.mUIItemRowHeader5 == null))
                {
                    this.mUIItemRowHeader5 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader5.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader5;
            }
        }
        
        public WinRowHeader UIItemRowHeader6
        {
            get
            {
                if ((this.mUIItemRowHeader6 == null))
                {
                    this.mUIItemRowHeader6 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader6.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader6;
            }
        }
        
        public WinRowHeader UIItemRowHeader7
        {
            get
            {
                if ((this.mUIItemRowHeader7 == null))
                {
                    this.mUIItemRowHeader7 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader7.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader7;
            }
        }
        
        public WinRowHeader UIItemRowHeader8
        {
            get
            {
                if ((this.mUIItemRowHeader8 == null))
                {
                    this.mUIItemRowHeader8 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader8.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader8;
            }
        }
        
        public WinRowHeader UIItemRowHeader9
        {
            get
            {
                if ((this.mUIItemRowHeader9 == null))
                {
                    this.mUIItemRowHeader9 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader9.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader9;
            }
        }
        
        public WinRowHeader UIItemRowHeader10
        {
            get
            {
                if ((this.mUIItemRowHeader10 == null))
                {
                    this.mUIItemRowHeader10 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader10.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader10;
            }
        }
        
        public WinRowHeader UIItemRowHeader11
        {
            get
            {
                if ((this.mUIItemRowHeader11 == null))
                {
                    this.mUIItemRowHeader11 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader11.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader11;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        
        private WinRowHeader mUIItemRowHeader1;
        
        private WinRowHeader mUIItemRowHeader2;
        
        private WinRowHeader mUIItemRowHeader3;
        
        private WinRowHeader mUIItemRowHeader4;
        
        private WinRowHeader mUIItemRowHeader5;
        
        private WinRowHeader mUIItemRowHeader6;
        
        private WinRowHeader mUIItemRowHeader7;
        
        private WinRowHeader mUIItemRowHeader8;
        
        private WinRowHeader mUIItemRowHeader9;
        
        private WinRowHeader mUIItemRowHeader10;
        
        private WinRowHeader mUIItemRowHeader11;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINetworkSharegridContWindow : WinWindow
    {
        
        public UINetworkSharegridContWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "networkSharegridControl";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UINetworkSharegridContTable UINetworkSharegridContTable
        {
            get
            {
                if ((this.mUINetworkSharegridContTable == null))
                {
                    this.mUINetworkSharegridContTable = new UINetworkSharegridContTable(this);
                }
                return this.mUINetworkSharegridContTable;
            }
        }
        #endregion
        
        #region Fields
        private UINetworkSharegridContTable mUINetworkSharegridContTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINetworkSharegridContTable : WinTable
    {
        
        public UINetworkSharegridContTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIHeaderPanelClient8 UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new UIHeaderPanelClient8(this);
                }
                return this.mUIHeaderPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderPanelClient8 mUIHeaderPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHeaderPanelClient8 : WinClient
    {
        
        public UIHeaderPanelClient8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader;
            }
        }
        
        public WinRowHeader UIItemRowHeader1
        {
            get
            {
                if ((this.mUIItemRowHeader1 == null))
                {
                    this.mUIItemRowHeader1 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader1.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader1;
            }
        }
        
        public WinRowHeader UIItemRowHeader2
        {
            get
            {
                if ((this.mUIItemRowHeader2 == null))
                {
                    this.mUIItemRowHeader2 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader2.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader2;
            }
        }
        
        public WinRowHeader UIItemRowHeader3
        {
            get
            {
                if ((this.mUIItemRowHeader3 == null))
                {
                    this.mUIItemRowHeader3 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader3.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader3;
            }
        }
        
        public WinRowHeader UIItemRowHeader4
        {
            get
            {
                if ((this.mUIItemRowHeader4 == null))
                {
                    this.mUIItemRowHeader4 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader4.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader4;
            }
        }
        
        public WinRowHeader UIItemRowHeader5
        {
            get
            {
                if ((this.mUIItemRowHeader5 == null))
                {
                    this.mUIItemRowHeader5 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader5.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader5;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        
        private WinRowHeader mUIItemRowHeader1;
        
        private WinRowHeader mUIItemRowHeader2;
        
        private WinRowHeader mUIItemRowHeader3;
        
        private WinRowHeader mUIItemRowHeader4;
        
        private WinRowHeader mUIItemRowHeader5;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIInitiatorGridControlWindow : WinWindow
    {
        
        public UIInitiatorGridControlWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "initiatorGridControl";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIInitiatorGridControlTable UIInitiatorGridControlTable
        {
            get
            {
                if ((this.mUIInitiatorGridControlTable == null))
                {
                    this.mUIInitiatorGridControlTable = new UIInitiatorGridControlTable(this);
                }
                return this.mUIInitiatorGridControlTable;
            }
        }
        #endregion
        
        #region Fields
        private UIInitiatorGridControlTable mUIInitiatorGridControlTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIInitiatorGridControlTable : WinTable
    {
        
        public UIInitiatorGridControlTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public UIHeaderPanelClient9 UIHeaderPanelClient
        {
            get
            {
                if ((this.mUIHeaderPanelClient == null))
                {
                    this.mUIHeaderPanelClient = new UIHeaderPanelClient9(this);
                }
                return this.mUIHeaderPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIHeaderPanelClient9 mUIHeaderPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHeaderPanelClient9 : WinClient
    {
        
        public UIHeaderPanelClient9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinRowHeader UIItemRowHeader
        {
            get
            {
                if ((this.mUIItemRowHeader == null))
                {
                    this.mUIItemRowHeader = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader;
            }
        }
        
        public WinRowHeader UIItemRowHeader1
        {
            get
            {
                if ((this.mUIItemRowHeader1 == null))
                {
                    this.mUIItemRowHeader1 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader1.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader1;
            }
        }
        
        public WinRowHeader UIItemRowHeader2
        {
            get
            {
                if ((this.mUIItemRowHeader2 == null))
                {
                    this.mUIItemRowHeader2 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader2.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader2;
            }
        }
        
        public WinRowHeader UIItemRowHeader3
        {
            get
            {
                if ((this.mUIItemRowHeader3 == null))
                {
                    this.mUIItemRowHeader3 = new WinRowHeader(this);
                    #region Search Criteria
                    this.mUIItemRowHeader3.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItemRowHeader3;
            }
        }
        #endregion
        
        #region Fields
        private WinRowHeader mUIItemRowHeader;
        
        private WinRowHeader mUIItemRowHeader1;
        
        private WinRowHeader mUIItemRowHeader2;
        
        private WinRowHeader mUIItemRowHeader3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIStatusProgressControWindow : WinWindow
    {
        
        public UIStatusProgressControWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "StatusProgressControl";
            this.WindowTitles.Add("EMC Storage Integrator (x64)");
            #endregion
        }
        
        #region Properties
        public WinProgressBar UIItem30ProgressBar
        {
            get
            {
                if ((this.mUIItem30ProgressBar == null))
                {
                    this.mUIItem30ProgressBar = new WinProgressBar(this);
                    #region Search Criteria
                    this.mUIItem30ProgressBar.SearchProperties[WinProgressBar.PropertyNames.Name] = "30";
                    this.mUIItem30ProgressBar.WindowTitles.Add("EMC Storage Integrator (x64)");
                    #endregion
                }
                return this.mUIItem30ProgressBar;
            }
        }
        #endregion
        
        #region Fields
        private WinProgressBar mUIItem30ProgressBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRemoveSystemWindow : WinWindow
    {
        
        public UIRemoveSystemWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Remove System";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Remove System");
            #endregion
        }
        
        #region Properties
        public UIRemoveSystemDialog UIRemoveSystemDialog
        {
            get
            {
                if ((this.mUIRemoveSystemDialog == null))
                {
                    this.mUIRemoveSystemDialog = new UIRemoveSystemDialog(this);
                }
                return this.mUIRemoveSystemDialog;
            }
        }
        #endregion
        
        #region Fields
        private UIRemoveSystemDialog mUIRemoveSystemDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRemoveSystemDialog : WinControl
    {
        
        public UIRemoveSystemDialog(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Remove System";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
            this.WindowTitles.Add("Remove System");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "&Yes";
                    this.mUIYesButton.WindowTitles.Add("Remove System");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
}
